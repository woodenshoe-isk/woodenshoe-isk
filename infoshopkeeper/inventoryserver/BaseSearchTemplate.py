#!/usr/bin/env python


##################################################
## DEPENDENCIES
import sys
import os
import os.path

try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import (
    NotFound,
    valueForName,
    valueFromSearchList,
    valueFromFrameOrSearchList,
)
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Cheetah.compat import unicode
from inventoryserver.Skeleton import Skeleton

##################################################
## MODULE CONSTANTS
VFFSL = valueFromFrameOrSearchList
VFSL = valueFromSearchList
VFN = valueForName
currentTime = time.time
__CHEETAH_version__ = "3.0.0"
__CHEETAH_versionTuple__ = (3, 0, 0, "final", 1)
__CHEETAH_genTime__ = 1510105565.750722
__CHEETAH_genTimestamp__ = "Wed Nov  8 01:46:05 2017"
__CHEETAH_src__ = "BaseSearchTemplate.tmpl"
__CHEETAH_srcLastModified__ = "Wed Nov  8 00:51:24 2017"
__CHEETAH_docstring__ = "Autogenerated by Cheetah: The Python-Powered Template Engine"

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
        "This template was compiled with Cheetah version"
        " %s. Templates compiled before version %s must be recompiled."
        % (__CHEETAH_version__, RequiredCheetahVersion)
    )

##################################################
## CLASSES


class BaseSearchTemplate(Skeleton):

    ##################################################
    ## CHEETAH GENERATED METHODS

    def __init__(self, *args, **KWs):

        super(BaseSearchTemplate, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = "searchList namespaces filter filtersLib errorCatcher".split()
            for k, v in KWs.items():
                if k in allowedKWs:
                    cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)

    def pagetitle(self, **KWS):

        ## CHEETAH: generated from #def pagetitle at line 7, col 1.
        trans = KWS.get("trans")
        if (
            not trans
            and not self._CHEETAH__isBuffering
            and not callable(self.transaction)
        ):
            trans = self.transaction  # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter

        ########################################
        ## START - generated method body

        write(
            """Search the inventory
"""
        )

        ########################################
        ## END - generated method body

        return _dummyTrans and trans.response().getvalue() or ""

    def headscripts(self, **KWS):

        ## CHEETAH: generated from #def headscripts at line 11, col 1.
        trans = KWS.get("trans")
        if (
            not trans
            and not self._CHEETAH__isBuffering
            and not callable(self.transaction)
        ):
            trans = self.transaction  # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter

        ########################################
        ## START - generated method body

        write(
            """<script src="/javascript/jquery.fixedheadertable.js"></script>
<script type="text/javascript">
    //Make lesser used fields hideable
    jQuery(document).ready( function(){
        //.showHideSearchForm hidden 
        jQuery(".showHideSearchForm").hide();
        
        //this is where we open/close disclosure triangle
        //array is open/closed options for span class
        var disclosureTriContent = [\'<span class="show_hide_disc_triangle ui-state-default ui-corner-all" data-subscript="0"><span class="ui-icon ui-icon-triangle-1-e"></span><span class="text" style="display: block; ">More options...</span></span>\',
            \'<span class="show_hide_disc_triangle ui-state-default ui-corner-all" data-subscript="1"><span class="ui-icon ui-icon-triangle-1-s"></span><span class="text" style="display: block; ">Fewer options...</span></span>\'];

        //start out with .slidingDiv hidden
        jQuery(".slidingDiv").hide();
        jQuery(".show_hide_disc_triangle").show();
        jQuery(\'.show_hide_div\').click(function(){
            //slidetoggle hides/shows div
            jQuery(".slidingDiv").slideToggle();
            //swap out label on show/hide fields button
            jQuery(this).html(disclosureTriContent[(jQuery(this).find(\'.show_hide_disc_triangle\').data(\'subscript\') + 1) % 2]);
            jQuery(this).find(\'.show_hide_disc_triangle\').show();
            return false
        });
        
        jQuery(\'#begin_date,#end_date\').datepicker({dateFormat:\'yy-mm-dd\'}).blur();
        var resultsTable = jQuery(\'#results_table\').dataTable({    \'aSorting\':[[1, \'asc\']],
                                                \'sPaginationType\':\'simple_numbers\',
                                                \'columnDefs\': [
                                                    {},
                                                ],
                                                "bJQueryUI": true,
                                                "bAutoWidth":true,
                                                "order":[[1, \'asc\']],
                                                "iDisplayLength": 50,
                                                "scrollX": 100,
                                                "sDom": \'<"top"lf>rt<"bottom"ip><"clear">\'
                                                });

\t});
</script>
"""
        )

        ########################################
        ## END - generated method body

        return _dummyTrans and trans.response().getvalue() or ""

    def header_title(self, **KWS):

        ## CHEETAH: generated from #block header_title at line 57, col 1.
        trans = KWS.get("trans")
        if (
            not trans
            and not self._CHEETAH__isBuffering
            and not callable(self.transaction)
        ):
            trans = self.transaction  # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter

        ########################################
        ## START - generated method body

        ########################################
        ## END - generated method body

        return _dummyTrans and trans.response().getvalue() or ""

    def body(self, **KWS):

        ## CHEETAH: generated from #def body at line 54, col 1.
        trans = KWS.get("trans")
        if (
            not trans
            and not self._CHEETAH__isBuffering
            and not callable(self.transaction)
        ):
            trans = self.transaction  # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter

        ########################################
        ## START - generated method body

        write(
            """
<h1>
"""
        )
        self.header_title(trans=trans)
        write(
            """</h1>

<div class="showHideSearchForm"><a  href="javascript:show_hide(\'search_form\')">Show/hide search form</a></div>
<br />
<form id="search_form" method="get" action="/search"
"""
        )
        if not (VFFSL(SL, "empty", True)):  # generated from line 64, col 1
            write(
                """style="visibility:hidden;display:none"
"""
            )
        write(
            '''>

<label class="textbox" for="title">Title</label> 
<input class="textbox" type="text" id="title" name="title" value="'''
        )
        _v = VFFSL(SL, "title", True)  # '$title' on line 70, col 67
        if _v is not None:
            write(_filter(_v, rawExpr="$title"))  # from line 70, col 67.
        write(
            '''" /><br />

<label class="textbox" for="author">Author</label> 
<input class="textbox" type="text" name="author" id="author" value="'''
        )
        _v = VFFSL(SL, "author", True)  # '$author' on line 73, col 69
        if _v is not None:
            write(_filter(_v, rawExpr="$author"))  # from line 73, col 69.
        write(
            '''" /><br />

<label class="textbox" for="category">Keyword</label> 
<input class="textbox" type="text" name="category" id="category" value="'''
        )
        _v = VFFSL(SL, "category", True)  # '$category' on line 76, col 73
        if _v is not None:
            write(_filter(_v, rawExpr="$category"))  # from line 76, col 73.
        write(
            '''" /><br />

<label class="textbox" for="isbn">ISBN</label> 
<input class="textbox" type="text" name="isbn" id="isbn" value="'''
        )
        _v = VFFSL(SL, "isbn", True)  # '$isbn' on line 79, col 65
        if _v is not None:
            write(_filter(_v, rawExpr="$isbn"))  # from line 79, col 65.
        write(
            """" /><br />

<div class=\'show_hide_div\'>
<span class="show_hide_disc_triangle ui-state-default ui-corner-all" data-subscript="0"><span class="ui-icon ui-icon-triangle-1-e"></span><span class="text" style="display: block; ">More options...</span></span>
</div>
<div class="slidingDiv">

<label class="textbox" for="location">Location</label> 
<select class="textbox" id="location" name="location">
"""
        )
        i = 0
        for loc in VFFSL(SL, "locations", True):  # generated from line 89, col 1
            write("""<option id=""")
            _v = VFFSL(SL, "i", True)  # '$i' on line 90, col 12
            if _v is not None:
                write(_filter(_v, rawExpr="$i"))  # from line 90, col 12.
            write(""" value='""")
            _v = VFFSL(SL, "loc.id", True)  # '$loc.id' on line 90, col 22
            if _v is not None:
                write(_filter(_v, rawExpr="$loc.id"))  # from line 90, col 22.
            write(
                """' 
"""
            )
            if "%s" % (VFFSL(SL, "loc.id", True)) == VFFSL(
                SL, "location", True
            ):  # generated from line 91, col 1
                write(
                    """selected="true" 
"""
                )
            write(""">""")
            _v = VFFSL(
                SL, "loc.locationName", True
            )  # '$loc.locationName' on line 94, col 2
            if _v is not None:
                write(_filter(_v, rawExpr="$loc.locationName"))  # from line 94, col 2.
            write(
                """</option>
"""
            )
            i = VFFSL(SL, "i", True) + 1
        write(
            '''</select><br />

<label class="textbox" for="publisher">Publisher</label> 
<input class="textbox" type="text" name="publisher" id="publisher" value="'''
        )
        _v = VFFSL(SL, "publisher", True)  # '$publisher' on line 100, col 75
        if _v is not None:
            write(_filter(_v, rawExpr="$publisher"))  # from line 100, col 75.
        write(
            '''" /><br />

<label class="textbox" for="distributor">Distributor</label> 
<input class="textbox" type="text" name="distributor" id="distributor" value="'''
        )
        _v = VFFSL(SL, "distributor", True)  # '$distributor' on line 103, col 79
        if _v is not None:
            write(_filter(_v, rawExpr="$distributor"))  # from line 103, col 79.
        write(
            '''" /><br />

<label class="textbox" for="owner">Owner</label> 
<input class="textbox" type="text" name="owner" id="owner" value="'''
        )
        _v = VFFSL(SL, "owner", True)  # '$owner' on line 106, col 67
        if _v is not None:
            write(_filter(_v, rawExpr="$owner"))  # from line 106, col 67.
        write(
            """" /><br />


<label class="textbox" for="out_of_stock">Only return out of stock books?</label>

<fieldset id="out_of_stock">
no <input type="radio" name="out_of_stock" id="out_of_stock_no" value="no" 
"""
        )
        if VFFSL(SL, "out_of_stock", True) == "no":  # generated from line 113, col 1
            write(
                """checked
"""
            )
        write(
            """> 
yes<input type="radio" name="out_of_stock" id="out_of_stock_yes" value="yes"
"""
        )
        if VFFSL(SL, "out_of_stock", True) == "yes":  # generated from line 118, col 1
            write(
                """checked
"""
            )
        write(
            '''>
</fieldset>

<br />


<label class="textbox" for="stock_less_than">This many or less in stock</label> 
<input class="textbox" type="text" name="stock_less_than" id="stock_less_than" value="'''
        )
        _v = VFFSL(
            SL, "stock_less_than", True
        )  # '$stock_less_than' on line 128, col 87
        if _v is not None:
            write(_filter(_v, rawExpr="$stock_less_than"))  # from line 128, col 87.
        write(
            '''" /><br />

<label class="textbox" for="stock_more_than">This many or more in stock</label> 
<input class="textbox" type="text" name="stock_more_than" id="stock_more_than" value="'''
        )
        _v = VFFSL(
            SL, "stock_more_than", True
        )  # '$stock_more_than' on line 131, col 87
        if _v is not None:
            write(_filter(_v, rawExpr="$stock_more_than"))  # from line 131, col 87.
        write(
            '''" /><br />

<label class="textbox" for="sold_more_than">This many or more sold</label> 
<input class="textbox" type="text" name="sold_more_than" id="sold_more_than"  value="'''
        )
        _v = VFFSL(SL, "sold_more_than", True)  # '$sold_more_than' on line 134, col 86
        if _v is not None:
            write(_filter(_v, rawExpr="$sold_more_than"))  # from line 134, col 86.
        write(
            """" /><br />

<label class=\'textbox\' for=\'begin_date\'>This item sold After:</label><input type=\'text\' class=\'textbox\' name=\'begin_date\' id=\'begin_date\' value=\'"""
        )
        _v = VFFSL(SL, "begin_date", True)  # '${begin_date}' on line 136, col 146
        if _v is not None:
            write(_filter(_v, rawExpr="${begin_date}"))  # from line 136, col 146.
        write(
            """'/><br />
<label class='textbox' for='end_date'>This item sold Before</label><input type='text' class='textbox' name='end_date' id='end_date' value='"""
        )
        _v = VFFSL(SL, "end_date", True)  # '${end_date}' on line 137, col 140
        if _v is not None:
            write(_filter(_v, rawExpr="${end_date}"))  # from line 137, col 140.
        write(
            """'/><br />
"""
        )
        #
        # <script type='text/javascript'>
        #     Calendar.setup({
        #         inputField     :    'begin_date',   // id of the input field
        #         ifFormat       :    '%Y-%m-%d',       // format of the input field
        #         showsTime      :    false,
        #     });
        #     Calendar.setup({
        #         inputField     :    'end_date',   // id of the input field
        #         ifFormat       :    '%Y-%m-%d',       // format of the input field
        #         showsTime      :    false,
        #     });
        # </script>
        write(
            '''
<label class="textbox" for="tag">Tag</label> 
<input class="textbox" type="text" id="tag" name="tag" value="'''
        )
        _v = VFFSL(SL, "tag", True)  # '$tag' on line 154, col 63
        if _v is not None:
            write(_filter(_v, rawExpr="$tag"))  # from line 154, col 63.
        write(
            """" /><br />
</div>

<label class="textbox" for="kind">Kind</label> 
<select class="textbox" id="kind" name="kind">
"""
        )
        for k in VFFSL(SL, "kinds", True):  # generated from line 159, col 1
            write("""<option value='""")
            _v = VFFSL(SL, "k.id", True)  # '$k.id' on line 160, col 16
            if _v is not None:
                write(_filter(_v, rawExpr="$k.id"))  # from line 160, col 16.
            write(
                """' 
"""
            )
            if "%s" % (VFFSL(SL, "k.id", True)) == VFFSL(
                SL, "kind", True
            ):  # generated from line 161, col 1
                write(
                    """selected="true" 
"""
                )
            write(""">""")
            _v = VFFSL(SL, "k.kindName", True)  # '$k.kindName' on line 164, col 2
            if _v is not None:
                write(_filter(_v, rawExpr="$k.kindName"))  # from line 164, col 2.
            write(
                """</option>
"""
            )
        write(
            """</select><br />

<input class="submit" type="submit">

<br />
</form>
<h1> """
        )
        _v = VFFSL(SL, "table_is_form", True)  # '$table_is_form' on line 172, col 6
        if _v is not None:
            write(_filter(_v, rawExpr="$table_is_form"))  # from line 172, col 6.
        write(
            """ </h1>
"""
        )
        _v = VFFSL(SL, "onclickhandler", True)  # '$onclickhandler' on line 173, col 1
        if _v is not None:
            write(_filter(_v, rawExpr="$onclickhandler"))  # from line 173, col 1.
        write(
            """
<h1> """
        )
        _v = VFFSL(SL, "myname", True)  # '$myname' on line 174, col 6
        if _v is not None:
            write(_filter(_v, rawExpr="$myname"))  # from line 174, col 6.
        write(
            """ </h1>
"""
        )
        if VFFSL(SL, "table_is_form", True) == True:  # generated from line 175, col 1
            write(
                """<form action="/titlelist" method="get" >
"""
            )
        write(
            """<table class="sortable" id="results_table" >
<thead>
  <tr>
"""
        )
        if VFFSL(SL, "table_is_form", True) == True:  # generated from line 181, col 1
            write(
                """    <th>Mark</th>
"""
            )
        write(
            """    <th>Title</th>
    <th>Author</th>
    <th>Format</th>
    <th>Copies in Stock</th>
    <th>Copies Sold</th>
    <th>Distributor</th>
    <th>Publisher</th>
    <th>First Inventoried</th>
    <th>Latest Inventoried</th>
    <th>First Sold</th>
    <th>Last Sold</th>
"""
        )
        # <th>Keyword</th>
        write(
            """  </tr>
</thead>
<tbody>
"""
        )
        for t in VFFSL(SL, "titles", True):  # generated from line 199, col 1
            write(
                """  <tr>
"""
            )
            if (
                VFFSL(SL, "table_is_form", True) == True
            ):  # generated from line 201, col 1
                write('''    <td><input type="checkbox" name="titles" value="''')
                _v = VFFSL(SL, "t.id", True)  # '$t.id' on line 202, col 53
                if _v is not None:
                    write(_filter(_v, rawExpr="$t.id"))  # from line 202, col 53.
                write(
                    """" onclick=\'if (event.stopPropagation){
               event.stopPropagation();
           }
           else if(window.event){
              window.event.cancelBubble=true;
           }\'/></td>
"""
                )
            write("""    <td>""")
            if VFN(VFFSL(SL, "t", True), "safe", False)(
                "booktitle"
            ):  # generated from line 209, col 9
                _v = VFN(VFFSL(SL, "t", True), "safe", False)("booktitle")
                if _v is not None:
                    write(_filter(_v))
            else:
                _v = ""
                if _v is not None:
                    write(_filter(_v))
            write(
                """</td>
    <td>"""
            )
            if VFFSL(SL, "t.authors_as_string", True):  # generated from line 210, col 9
                _v = VFFSL(SL, "t.authors_as_string", True)
                if _v is not None:
                    write(_filter(_v))
            else:
                _v = ""
                if _v is not None:
                    write(_filter(_v))
            write(
                """</td>
    <td>"""
            )
            if VFFSL(SL, "t.type", True):  # generated from line 211, col 9
                _v = VFFSL(SL, "t.type", True)
                if _v is not None:
                    write(_filter(_v))
            else:
                _v = ""
                if _v is not None:
                    write(_filter(_v))
            write(
                """</td>
    <td>"""
            )
            if VFN(VFFSL(SL, "t", True), "copies_in_status", False)(
                "STOCK"
            ):  # generated from line 212, col 9
                _v = VFN(VFFSL(SL, "t", True), "copies_in_status", False)("STOCK")
                if _v is not None:
                    write(_filter(_v))
            else:
                _v = ""
                if _v is not None:
                    write(_filter(_v))
            write(
                """</td>
    <td>"""
            )
            if VFN(VFFSL(SL, "t", True), "copies_in_status", False)(
                "SOLD"
            ):  # generated from line 213, col 9
                _v = VFN(VFFSL(SL, "t", True), "copies_in_status", False)("SOLD")
                if _v is not None:
                    write(_filter(_v))
            else:
                _v = ""
                if _v is not None:
                    write(_filter(_v))
            write(
                """</td>
    <td>"""
            )
            if VFN(
                VFFSL(SL, "t", True), "distributors_as_string", False
            )():  # generated from line 214, col 9
                _v = VFN(VFFSL(SL, "t", True), "distributors_as_string", False)()
                if _v is not None:
                    write(_filter(_v))
            else:
                _v = ""
                if _v is not None:
                    write(_filter(_v))
            write(
                """</td>
    <td>"""
            )
            if VFN(VFFSL(SL, "t", True), "safe", False)(
                "publisher"
            ):  # generated from line 215, col 9
                _v = VFN(VFFSL(SL, "t", True), "safe", False)("publisher")
                if _v is not None:
                    write(_filter(_v))
            else:
                _v = ""
                if _v is not None:
                    write(_filter(_v))
            write(
                """</td>
    <td>"""
            )
            if VFFSL(
                SL, "t.first_book_inventoried.inventoried_when", True
            ):  # generated from line 216, col 9
                _v = VFFSL(SL, "t.first_book_inventoried.inventoried_when", True)
                if _v is not None:
                    write(_filter(_v))
            else:
                _v = ""
                if _v is not None:
                    write(_filter(_v))
            write(
                """</td>
    <td>"""
            )
            if VFFSL(
                SL, "t.last_book_inventoried.inventoried_when", True
            ):  # generated from line 217, col 9
                _v = VFFSL(SL, "t.last_book_inventoried.inventoried_when", True)
                if _v is not None:
                    write(_filter(_v))
            else:
                _v = ""
                if _v is not None:
                    write(_filter(_v))
            write(
                """</td>
    <td>"""
            )
            if VFFSL(
                SL, "t.first_book_sold.sold_when", True
            ):  # generated from line 218, col 9
                _v = VFFSL(SL, "t.first_book_sold.sold_when", True)
                if _v is not None:
                    write(_filter(_v))
            else:
                _v = ""
                if _v is not None:
                    write(_filter(_v))
            write(
                """</td>
    <td>"""
            )
            if VFFSL(
                SL, "t.last_book_sold.sold_when", True
            ):  # generated from line 219, col 9
                _v = VFFSL(SL, "t.last_book_sold.sold_when", True)
                if _v is not None:
                    write(_filter(_v))
            else:
                _v = ""
                if _v is not None:
                    write(_filter(_v))
            write(
                """</td>
"""
            )
            # <td>#if $t.categories_as_string then $t.categories_as_string else ""#</td>
            write(
                """</tr>
"""
            )
        write(
            """</tbody>
</table>

"""
        )
        if table_is_form == True:  # generated from line 226, col 1
            write(
                """<br />
<input class="submit"  name="list" type="submit" value="get marked titles" /><br /><br />
<input class="submit"  name="delete" onclick="return confirm(\'Are you sure?\');" type="submit" value="delete marked titles" />
</form>
"""
            )
        write(
            """
"""
        )

        ########################################
        ## END - generated method body

        return _dummyTrans and trans.response().getvalue() or ""

    def writeBody(self, **KWS):

        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (
            not trans
            and not self._CHEETAH__isBuffering
            and not callable(self.transaction)
        ):
            trans = self.transaction  # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter

        ########################################
        ## START - generated method body

        # Tried making search template subclassable
        # Cheetah did not seem to like #if $table_is_form when in #for loop
        write(
            """



"""
        )

        ########################################
        ## END - generated method body

        return _dummyTrans and trans.response().getvalue() or ""

    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES

    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_BaseSearchTemplate = "writeBody"


## END CLASS DEFINITION

if not hasattr(BaseSearchTemplate, "_initCheetahAttributes"):
    templateAPIClass = getattr(BaseSearchTemplate, "_CHEETAH_templateClass", Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(BaseSearchTemplate)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://cheetahtemplate.org/

##################################################
## if run from command line:
if __name__ == "__main__":
    from Cheetah.TemplateCmdLineIface import CmdLineIface

    CmdLineIface(templateObj=BaseSearchTemplate()).run()
