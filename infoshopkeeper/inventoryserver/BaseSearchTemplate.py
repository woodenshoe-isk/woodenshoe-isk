#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Skeleton import Skeleton

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.3'
__CHEETAH_versionTuple__ = (2, 4, 3, 'development', 0)
__CHEETAH_genTime__ = 1316642131.989555
__CHEETAH_genTimestamp__ = 'Wed Sep 21 17:55:31 2011'
__CHEETAH_src__ = 'BaseSearchTemplate.tmpl'
__CHEETAH_srcLastModified__ = 'Thu Sep 15 13:53:30 2011'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class BaseSearchTemplate(Skeleton):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(BaseSearchTemplate, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def pagetitle(self, **KWS):



        ## CHEETAH: generated from #def pagetitle at line 4, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''Search the inventory
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def headscripts(self, **KWS):



        ## CHEETAH: generated from #def headscripts at line 8, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''<script src="/javascript/jquery.fixedheadertable.js"></script>
<script type="text/javascript">                                         
\tjQuery(document).ready( function(){
\t    var disclosureTriContent = [\'<span class="show_hide_disc_triangle ui-state-default ui-corner-all" data-subscript="0"><span class="ui-icon ui-icon-triangle-1-e"></span><span class="text" style="display: block; ">More options...</span></span>\',
\t        \'<span class="show_hide_disc_triangle ui-state-default ui-corner-all" data-subscript="1"><span class="ui-icon ui-icon-triangle-1-s"></span><span class="text" style="display: block; ">Fewer options...</span></span>\'];
        jQuery(".slidingDiv").hide();
        jQuery(".showhide").hide();
        jQuery(".show_hide_disc_triangle").show();
        jQuery(\'.show_hide_div\').click(function(){
            jQuery(".slidingDiv").slideToggle();
            jQuery(this).html(disclosureTriContent[(jQuery(this).find(\'.show_hide_disc_triangle\').data(\'subscript\') + 1) % 2]);
            jQuery(this).find(\'.show_hide_disc_triangle\').show();
            return false
        });
        
        jQuery(\'#begin_date,#end_date\').datepicker({dateFormat:\'yy-mm-dd\'});
        jQuery(\'#results_table\').dataTable({    \'aSorting\':[[1, \'asc\']],
                                                \'sPaginationType\':\'full_numbers\'});
        
\t});
</script>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def header_title(self, **KWS):



        ## CHEETAH: generated from #block header_title at line 35, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def body(self, **KWS):



        ## CHEETAH: generated from #def body at line 32, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''
<h1>
''')
        self.header_title(trans=trans)
        write(u'''</h1>

<div class="showhide"><a  href="javascript:show_hide(\'search_form\')">Show/hide search form</a></div>
<br />
<form id="search_form" method="get" action="/search"
''')
        if not(VFFSL(SL,"empty",True)): # generated from line 42, col 1
            write(u'''style="visibility:hidden;display:none"
''')
        write(u'''>

<label class="textbox" for="title">Title</label> 
<input class="textbox" type="text" id="title" name="title" value="''')
        _v = VFFSL(SL,"title",True) # u'$title' on line 48, col 67
        if _v is not None: write(_filter(_v, rawExpr=u'$title')) # from line 48, col 67.
        write(u'''" /><br />

<label class="textbox" for="author">Author</label> 
<input class="textbox" type="text" name="author" id="author" value="''')
        _v = VFFSL(SL,"author",True) # u'$author' on line 51, col 69
        if _v is not None: write(_filter(_v, rawExpr=u'$author')) # from line 51, col 69.
        write(u'''" /><br />

<label class="textbox" for="category">Keyword</label> 
<input class="textbox" type="text" name="category" id="category" value="''')
        _v = VFFSL(SL,"category",True) # u'$category' on line 54, col 73
        if _v is not None: write(_filter(_v, rawExpr=u'$category')) # from line 54, col 73.
        write(u'''" /><br />

<label class="textbox" for="isbn">ISBN</label> 
<input class="textbox" type="text" name="isbn" id="isbn" value="''')
        _v = VFFSL(SL,"isbn",True) # u'$isbn' on line 57, col 65
        if _v is not None: write(_filter(_v, rawExpr=u'$isbn')) # from line 57, col 65.
        write(u'''" /><br />

<div class=\'show_hide_div\'>
<span class="show_hide_disc_triangle ui-state-default ui-corner-all" data-subscript="0"><span class="ui-icon ui-icon-triangle-1-e"></span><span class="text" style="display: block; ">More options...</span></span>
</div>
<div class="slidingDiv">

<label class="textbox" for="location">Location</label> 
<select class="textbox" id="location" name="location">
''')
        i = 0
        for loc in VFFSL(SL,"locations",True): # generated from line 67, col 1
            write(u'''<option id=''')
            _v = VFFSL(SL,"i",True) # u'$i' on line 68, col 12
            if _v is not None: write(_filter(_v, rawExpr=u'$i')) # from line 68, col 12.
            write(u""" value='""")
            _v = VFFSL(SL,"loc.id",True) # u'$loc.id' on line 68, col 22
            if _v is not None: write(_filter(_v, rawExpr=u'$loc.id')) # from line 68, col 22.
            write(u"""' 
""")
            if "%s" %(VFFSL(SL,"loc.id",True))==VFFSL(SL,"location",True): # generated from line 69, col 1
                write(u'''selected="true" 
''')
            write(u'''>''')
            _v = VFFSL(SL,"loc.locationName",True) # u'$loc.locationName' on line 72, col 2
            if _v is not None: write(_filter(_v, rawExpr=u'$loc.locationName')) # from line 72, col 2.
            write(u'''</option>
''')
            i = VFFSL(SL,"i",True)+1
        write(u'''</select><br />

<label class="textbox" for="publisher">Publisher</label> 
<input class="textbox" type="text" name="publisher" id="publisher" value="''')
        _v = VFFSL(SL,"publisher",True) # u'$publisher' on line 78, col 75
        if _v is not None: write(_filter(_v, rawExpr=u'$publisher')) # from line 78, col 75.
        write(u'''" /><br />

<label class="textbox" for="distributor">Distributor</label> 
<input class="textbox" type="text" name="distributor" id="distributor" value="''')
        _v = VFFSL(SL,"distributor",True) # u'$distributor' on line 81, col 79
        if _v is not None: write(_filter(_v, rawExpr=u'$distributor')) # from line 81, col 79.
        write(u'''" /><br />

<label class="textbox" for="owner">Owner</label> 
<input class="textbox" type="text" name="owner" id="owner" value="''')
        _v = VFFSL(SL,"owner",True) # u'$owner' on line 84, col 67
        if _v is not None: write(_filter(_v, rawExpr=u'$owner')) # from line 84, col 67.
        write(u'''" /><br />


<label class="textbox" for="out_of_stock">Only return out of stock books?</label>

<fieldset id="out_of_stock">
no <input type="radio" name="out_of_stock" id="out_of_stock_no" value="no" 
''')
        if VFFSL(SL,"out_of_stock",True) == 'no': # generated from line 91, col 1
            write(u'''checked
''')
        write(u'''> 
yes<input type="radio" name="out_of_stock" id="out_of_stock_yes" value="yes"
''')
        if VFFSL(SL,"out_of_stock",True) == 'yes': # generated from line 96, col 1
            write(u'''checked
''')
        write(u'''>
</fieldset>

<br />


<label class="textbox" for="stock_less_than">This many or less in stock</label> 
<input class="textbox" type="text" name="stock_less_than" id="stock_less_than" value="''')
        _v = VFFSL(SL,"stock_less_than",True) # u'$stock_less_than' on line 106, col 87
        if _v is not None: write(_filter(_v, rawExpr=u'$stock_less_than')) # from line 106, col 87.
        write(u'''" /><br />

<label class="textbox" for="stock_more_than">This many or more in stock</label> 
<input class="textbox" type="text" name="stock_more_than" id="stock_more_than" value="''')
        _v = VFFSL(SL,"stock_more_than",True) # u'$stock_more_than' on line 109, col 87
        if _v is not None: write(_filter(_v, rawExpr=u'$stock_more_than')) # from line 109, col 87.
        write(u'''" /><br />

<label class="textbox" for="sold_more_than">This many or more sold</label> 
<input class="textbox" type="text" name="sold_more_than" id="sold_more_than"  value="''')
        _v = VFFSL(SL,"sold_more_than",True) # u'$sold_more_than' on line 112, col 86
        if _v is not None: write(_filter(_v, rawExpr=u'$sold_more_than')) # from line 112, col 86.
        write(u'''" /><br />

<label class=\'textbox\' for=\'begin_date\'>This item sold After:</label><input type=\'text\' class=\'textbox\' name=\'begin_date\' id=\'begin_date\' value=\'''')
        _v = VFFSL(SL,"begin_date",True) # u'${begin_date}' on line 114, col 146
        if _v is not None: write(_filter(_v, rawExpr=u'${begin_date}')) # from line 114, col 146.
        write(u"""'/><br />
<label class='textbox' for='end_date'>This item sold Before</label><input type='text' class='textbox' name='end_date' id='end_date' value='""")
        _v = VFFSL(SL,"end_date",True) # u'${end_date}' on line 115, col 140
        if _v is not None: write(_filter(_v, rawExpr=u'${end_date}')) # from line 115, col 140.
        write(u"""'/><br />
""")
        # 
        # <script type='text/javascript'>
        #     Calendar.setup({
        #         inputField     :    'begin_date',   // id of the input field
        #         ifFormat       :    '%Y-%m-%d',       // format of the input field
        #         showsTime      :    false,
        #     });
        #     Calendar.setup({
        #         inputField     :    'end_date',   // id of the input field
        #         ifFormat       :    '%Y-%m-%d',       // format of the input field
        #         showsTime      :    false,
        #     });
        # </script>
        write(u'''
<label class="textbox" for="tag">Tag</label> 
<input class="textbox" type="text" id="tag" name="tag" value="''')
        _v = VFFSL(SL,"tag",True) # u'$tag' on line 132, col 63
        if _v is not None: write(_filter(_v, rawExpr=u'$tag')) # from line 132, col 63.
        write(u'''" /><br />
</div>

<label class="textbox" for="kind">Kind</label> 
<select class="textbox" id="kind" name="kind">
''')
        for k in VFFSL(SL,"kinds",True): # generated from line 137, col 1
            write(u"""<option value='""")
            _v = VFFSL(SL,"k.id",True) # u'$k.id' on line 138, col 16
            if _v is not None: write(_filter(_v, rawExpr=u'$k.id')) # from line 138, col 16.
            write(u"""' 
""")
            if "%s" %(VFFSL(SL,"k.id",True))==VFFSL(SL,"kind",True): # generated from line 139, col 1
                write(u'''selected="true" 
''')
            write(u'''>''')
            _v = VFFSL(SL,"k.kindName",True) # u'$k.kindName' on line 142, col 2
            if _v is not None: write(_filter(_v, rawExpr=u'$k.kindName')) # from line 142, col 2.
            write(u'''</option>
''')
        write(u'''</select><br />

<input class="submit" type="submit">

<br />
</form>
<h1> ''')
        _v = VFFSL(SL,"table_is_form",True) # u'$table_is_form' on line 150, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'$table_is_form')) # from line 150, col 6.
        write(u''' </h1>
''')
        _v = VFFSL(SL,"onclickhandler",True) # u'$onclickhandler' on line 151, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$onclickhandler')) # from line 151, col 1.
        write(u'''
<h1> ''')
        _v = VFFSL(SL,"myname",True) # u'$myname' on line 152, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'$myname')) # from line 152, col 6.
        write(u''' </h1>
''')
        if VFFSL(SL,"table_is_form",True) == True: # generated from line 153, col 1
            write(u'''<form action="/titlelist" method="get" >
''')
        write(u'''<table class="sortable" id="results_table" >
<thead>
  <tr>
''')
        if VFFSL(SL,"table_is_form",True) == True: # generated from line 159, col 1
            write(u'''    <th>Mark</th>
''')
        write(u'''    <th>Title</th>
    <th>Author</th>
    <th>Format</th>
    <th>Copies in Stock</th>
    <th>Copies Sold</th>
    <th>Distributor</th>
    <th>Publisher</th>
    <th>First Inventoried</th>
    <th>Latest Inventoried</th>
    <th>First Sold</th>
    <th>Last Sold</th>
''')
        # <th>Keyword</th>
        write(u'''  </tr>
</thead>
<tbody>
''')
        for t in VFFSL(SL,"titles",True): # generated from line 177, col 1
            write(u'''  <tr>
''')
            if VFFSL(SL,"table_is_form",True) == True: # generated from line 179, col 1
                write(u'''    <td><input type="checkbox" name="titles" value="''')
                _v = VFFSL(SL,"t.id",True) # u'$t.id' on line 180, col 53
                if _v is not None: write(_filter(_v, rawExpr=u'$t.id')) # from line 180, col 53.
                write(u'''" onclick=\'if (event.stopPropagation){
               event.stopPropagation();
           }
           else if(window.event){
              window.event.cancelBubble=true;
           }\'/></td>
''')
            write(u'''    <td>''')
            _v = VFN(VFFSL(SL,"t",True),"safe",False)('booktitle') # u"$t.safe('booktitle')" on line 187, col 9
            if _v is not None: write(_filter(_v, rawExpr=u"$t.safe('booktitle')")) # from line 187, col 9.
            write(u'''</td>
    <td>''')
            _v = VFFSL(SL,"t.authors_as_string",True) # u'$t.authors_as_string' on line 188, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'$t.authors_as_string')) # from line 188, col 9.
            write(u'''</td>
    <td>''')
            _v = VFFSL(SL,"t.type",True) # u'$t.type' on line 189, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'$t.type')) # from line 189, col 9.
            write(u'''</td>
    <td>''')
            _v = VFN(VFFSL(SL,"t",True),"copies_in_status",False)("STOCK") # u'${t.copies_in_status("STOCK")}' on line 190, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'${t.copies_in_status("STOCK")}')) # from line 190, col 9.
            write(u'''</td>
    <td>''')
            _v = VFN(VFFSL(SL,"t",True),"copies_in_status",False)("SOLD") # u'${t.copies_in_status("SOLD")}' on line 191, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'${t.copies_in_status("SOLD")}')) # from line 191, col 9.
            write(u'''</td>
    <td>''')
            _v = VFN(VFFSL(SL,"t",True),"distributors_as_string",False)() # u'${t.distributors_as_string()}' on line 192, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'${t.distributors_as_string()}')) # from line 192, col 9.
            write(u'''</td>
    <td>''')
            _v = VFN(VFFSL(SL,"t",True),"safe",False)('publisher') # u"${t.safe('publisher')}" on line 193, col 9
            if _v is not None: write(_filter(_v, rawExpr=u"${t.safe('publisher')}")) # from line 193, col 9.
            write(u'''</td>
    <td>''')
            _v = VFFSL(SL,"t.first_book_inventoried.inventoried_when",True) # u'${t.first_book_inventoried.inventoried_when}' on line 194, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'${t.first_book_inventoried.inventoried_when}')) # from line 194, col 9.
            write(u'''</td>
    <td>''')
            _v = VFFSL(SL,"t.last_book_inventoried.inventoried_when",True) # u'${t.last_book_inventoried.inventoried_when}' on line 195, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'${t.last_book_inventoried.inventoried_when}')) # from line 195, col 9.
            write(u'''</td>
    <td>''')
            _v = VFFSL(SL,"t.first_book_sold.sold_when",True) # u'${t.first_book_sold.sold_when}' on line 196, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'${t.first_book_sold.sold_when}')) # from line 196, col 9.
            write(u'''</td>
    <td>''')
            _v = VFFSL(SL,"t.last_book_sold.sold_when",True) # u'${t.last_book_sold.sold_when}' on line 197, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'${t.last_book_sold.sold_when}')) # from line 197, col 9.
            write(u'''</td>
''')
            # <td>$t.categories_as_string</td>
            write(u'''</tr>
''')
        write(u'''</tbody>
</table>

''')
        if table_is_form == True: # generated from line 204, col 1
            write(u'''<br />
<input class="submit"  name="list" type="submit" value="get marked titles" /><br /><br />
<input class="submit"  name="delete" onclick="return confirm(\'Are you sure?\');" type="submit" value="delete marked titles" />
</form>
''')
        write(u'''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''


''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_BaseSearchTemplate= 'writeBody'

## END CLASS DEFINITION

if not hasattr(BaseSearchTemplate, '_initCheetahAttributes'):
    templateAPIClass = getattr(BaseSearchTemplate, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(BaseSearchTemplate)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=BaseSearchTemplate()).run()


