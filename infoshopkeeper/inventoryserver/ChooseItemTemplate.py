#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Cheetah.compat import unicode
from inventoryserver.Skeleton import Skeleton

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '3.0.0'
__CHEETAH_versionTuple__ = (3, 0, 0, 'final', 1)
__CHEETAH_genTime__ = 1510105565.9796996
__CHEETAH_genTimestamp__ = 'Wed Nov  8 01:46:05 2017'
__CHEETAH_src__ = 'ChooseItemTemplate.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Nov  8 00:51:24 2017'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class ChooseItemTemplate(Skeleton):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(ChooseItemTemplate, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def pagetitle(self, **KWS):



        ## CHEETAH: generated from #def pagetitle at line 7, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''Search the inventory
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def headscripts(self, **KWS):



        ## CHEETAH: generated from #def headscripts at line 11, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''<script src="/javascript/jquery.fixedheadertable.js"></script>
<script type="text/javascript">                                         
    //Make lesser used fields hideable
    jQuery(document).ready( function(){
        //.showHideSearchForm hidden 
        jQuery(".showHideSearchForm").hide();
        
        //this is where we open/close disclosure triangle
        //array is open/closed options for span class
        var disclosureTriContent = [\'<span class="show_hide_disc_triangle ui-state-default ui-corner-all" data-subscript="0"><span class="ui-icon ui-icon-triangle-1-e"></span><span class="text" style="display: block; ">More options...</span></span>\',
            \'<span class="show_hide_disc_triangle ui-state-default ui-corner-all" data-subscript="1"><span class="ui-icon ui-icon-triangle-1-s"></span><span class="text" style="display: block; ">Fewer options...</span></span>\'];

        //start out with .slidingDiv hidden
        jQuery(".slidingDiv").hide();
        jQuery(".show_hide_disc_triangle").show();
        jQuery(\'.show_hide_div\').click(function(){
            //slidetoggle hides/shows div
            jQuery(".slidingDiv").slideToggle();
            //swap out label on show/hide fields button
            jQuery(this).html(disclosureTriContent[(jQuery(this).find(\'.show_hide_disc_triangle\').data(\'subscript\') + 1) % 2]);
            jQuery(this).find(\'.show_hide_disc_triangle\').show();
            return false
        });
        
        var price;
        var titleID;
        
        jQuery( "#price_dialog" ).dialog({
               autoOpen: false, 
               modal: true,
               buttons: {
                  OK: function() {
                        if ( !isNaN(jQuery(\'#price_select option:selected\').text()) ) {
                            price = jQuery(\'#price_select option:selected\').text();
                            jQuery.get(\'/register/add_item_to_cart\', {titleid:titleID, ourprice:price}, function() {
                                    document.location.href= \'/register/build_cart\';
                            });                                
                            jQuery(this).dialog("close");
                        }
                }
            },
        });
        
        jQuery(\'#begin_date,#end_date\').datepicker({dateFormat:\'yy-mm-dd\'}).blur();

        //hide book id column 
        //jQuery(\'#results_table td:nth-child(9), #results_table th:nth-child(9)\').hide();
        
        //dataTable gives us pagination, etc for free
        var resultsTable = jQuery(\'#results_table\').dataTable({    
                                                \'aSorting\':[[1, \'asc\']],
                                                \'order\':[[1, \'asc\']],
                                                \'columnDefs\': [
                                                    { targets: [0, 1], visible: false},
                                                ],
                                                \'sPaginationType\':\'full_numbers\',
                                                "iDisplayLength": 50});
        
        //doubleclick adds item to cart, except for iOS/Android
        //where we use a single click
        if (navigator.userAgent.match(/ipad|iphone|ios|android/i) == null) {
            jQuery(\'#results_table tr\').dblclick(function(event) {
                event.preventDefault();
                position = resultsTable.fnGetPosition(this); // getting the clicked row position
                titleID = resultsTable.fnGetData(position)[0];
                console.log( titleID );
                console.log(resultsTable.fnGetData(position));
                var price_array = eval(resultsTable.fnGetData(position)[1]);
                if (price_array.length==1) {
                    price = price_array[0];
                    jQuery.get(\'/register/add_item_to_cart\', {titleid:titleID, ourprice:price}, function() {
                        document.location.href= \'/register/build_cart\';
                    });
                } else {
                    jQuery(\'#price_select\').find(\'option:gt(0)\').remove();
                    jQuery.each(price_array, function(val, text) {
                        jQuery(\'#price_select\').append( jQuery(\'<option></option>\').val(val).html(text) )
                    });
                    jQuery(\'#price_dialog\').dialog(\'open\');
                }
                return false;
            });
        } else {
            jQuery(\'#results_table tr\').dblclick(function(event) {
                event.preventDefault();
                position = resultsTable.fnGetPosition(this); // getting the clicked row position
                titleID = resultsTable.fnGetData(position)[0];
                var price_array = eval(resultsTable.fnGetData(position)[1]);
                if (price_array.length==1) {
                    price = price_array[0];
                    jQuery.get(\'/register/add_item_to_cart\', {titleid:titleID, ourprice:price}, function() {
                        document.location.href= \'/register/build_cart\';
                    });
                } else {
                    jQuery(\'#price_select\').find(\'option:gt(0)\').remove();
                    jQuery.each(price_array, function(val, text) {
                        jQuery(\'#price_select\').append( jQuery(\'<option></option>\').val(val).html(text) )
                    });
                    jQuery(\'#price_dialog\').dialog(\'open\');
                }
                return false;
            });
        }
\t});
</script>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def body(self, **KWS):



        ## CHEETAH: generated from #def body at line 119, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''<h1>Inventory</h1>
<div class="showhide"><a  href="javascript:show_hide(\'search_form\')">Show/hide search form</a></div>
<br />
<form id="search_form" method="get" action="/register/select_item_search"
''')
        if not(VFFSL(SL,"empty",True)): # generated from line 124, col 1
            write('''style="visibility:hidden;display:none"
''')
        write('''>

<label class="textbox" for="title">Title</label> 
<input class="textbox" type="text" id="title" name="title" value="''')
        _v = VFFSL(SL,"title",True) # '$title' on line 130, col 67
        if _v is not None: write(_filter(_v, rawExpr='$title')) # from line 130, col 67.
        write('''" /><br />

<label class="textbox" for="author">Author</label> 
<input class="textbox" type="text" name="author" id="author" value="''')
        _v = VFFSL(SL,"author",True) # '$author' on line 133, col 69
        if _v is not None: write(_filter(_v, rawExpr='$author')) # from line 133, col 69.
        write('''" /><br />

<label class="textbox" for="category">Keyword</label> 
<input class="textbox" type="text" name="category" id="category" value="''')
        _v = VFFSL(SL,"category",True) # '$category' on line 136, col 73
        if _v is not None: write(_filter(_v, rawExpr='$category')) # from line 136, col 73.
        write('''" /><br />

<div class=\'show_hide_div\'>
<span class="show_hide_disc_triangle ui-state-default ui-corner-all" data-subscript="0"><span class="ui-icon ui-icon-triangle-1-e"></span><span class="text" style="display: block; ">More options...</span></span>
</div>
<div class="slidingDiv">

<label class="textbox" for="location">Location</label> 
<select class="textbox" id="location" name="location">
''')
        i = 0
        for loc in VFFSL(SL,"locations",True): # generated from line 146, col 1
            write('''<option id=''')
            _v = VFFSL(SL,"i",True) # '$i' on line 147, col 12
            if _v is not None: write(_filter(_v, rawExpr='$i')) # from line 147, col 12.
            write(""" value='""")
            _v = VFFSL(SL,"loc.id",True) # '$loc.id' on line 147, col 22
            if _v is not None: write(_filter(_v, rawExpr='$loc.id')) # from line 147, col 22.
            write("""' 
""")
            if "%s" %(VFFSL(SL,"loc.id",True))==VFFSL(SL,"location",True): # generated from line 148, col 1
                write('''selected="true" 
''')
            write('''>''')
            _v = VFFSL(SL,"loc.locationName",True) # '$loc.locationName' on line 151, col 2
            if _v is not None: write(_filter(_v, rawExpr='$loc.locationName')) # from line 151, col 2.
            write('''</option>
''')
            i = VFFSL(SL,"i",True)+1
        write('''</select><br />

<label class="textbox" for="publisher">Publisher</label> 
<input class="textbox" type="text" name="publisher" id="publisher" value="''')
        _v = VFFSL(SL,"publisher",True) # '$publisher' on line 157, col 75
        if _v is not None: write(_filter(_v, rawExpr='$publisher')) # from line 157, col 75.
        write('''" /><br />

<label class="textbox" for="distributor">Distributor</label> 
<input class="textbox" type="text" name="distributor" id="distributor" value="''')
        _v = VFFSL(SL,"distributor",True) # '$distributor' on line 160, col 79
        if _v is not None: write(_filter(_v, rawExpr='$distributor')) # from line 160, col 79.
        write('''" /><br />

<label class="textbox" for="owner">Owner</label> 
<input class="textbox" type="text" name="owner" id="owner" value="''')
        _v = VFFSL(SL,"owner",True) # '$owner' on line 163, col 67
        if _v is not None: write(_filter(_v, rawExpr='$owner')) # from line 163, col 67.
        write('''" /><br />

<label class="textbox" for="tag">Tag</label> 
<input class="textbox" type="text" id="tag" name="tag" value="''')
        _v = VFFSL(SL,"tag",True) # '$tag' on line 166, col 63
        if _v is not None: write(_filter(_v, rawExpr='$tag')) # from line 166, col 63.
        write('''" /><br />
</div>

<label class="textbox" for="kind">Kind</label> 
<select class="textbox" id="kind" name="kind">
''')
        for k in VFFSL(SL,"kinds",True): # generated from line 171, col 1
            write("""<option value='""")
            _v = VFFSL(SL,"k.id",True) # '$k.id' on line 172, col 16
            if _v is not None: write(_filter(_v, rawExpr='$k.id')) # from line 172, col 16.
            write("""' 
""")
            if "%s" %(VFFSL(SL,"k.id",True))==VFFSL(SL,"kind",True): # generated from line 173, col 1
                write('''selected="true" 
''')
            write('''>''')
            _v = VFFSL(SL,"k.kindName",True) # '$k.kindName' on line 176, col 2
            if _v is not None: write(_filter(_v, rawExpr='$k.kindName')) # from line 176, col 2.
            write('''</option>
''')
        write('''</select><br />

<input class="submit" type="submit">

<br />
</form>
<table class="sortable" id="results_table" >
<colgroup class="title_id">
<thead>
  <tr>
    <th>ID</th>
    <th>Prices</th>
''')
        if VFFSL(SL,"should_show_images",True): # generated from line 190, col 5
            write('''    <th>Image</th>
''')
        write('''    <th>Title</th>
    <th>Author</th>
    <th>ISBN</th>
    <th>Format</th>
    <th>Copies in Stock</th>
    <th>Distributor</th>
    <th>Publisher</th>
    <th>Last Sold</th>
''')
        # <th>Keyword</th>
        write('''  </tr>
</thead>
<tbody>
''')
        for t in VFFSL(SL,"titles",True): # generated from line 205, col 1
            write('''  <tr>
    <td>''')
            if VFFSL(SL,"t.id",True) : # generated from line 207, col 9
                _v =  VFFSL(SL,"t.id",True) 
                if _v is not None: write(_filter(_v))
            else:
                _v =  ""
                if _v is not None: write(_filter(_v))
            write('''</td>
    <td>
''')
            _v = list({x.ourprice for x in t.books if x.status=='STOCK'})
            if _v is not None: write(_filter(_v))
            write('''    </td>
''')
            if VFFSL(SL,"should_show_images",True): # generated from line 211, col 5
                write('''    <td>
''')
                if VFFSL(SL,"t.images",True): # generated from line 213, col 9
                    write("""        <img src='""")
                    _v = VFN(VFFSL(SL,"t.images",True),"retrieve_image_url",False)("small") # '$t.images.retrieve_image_url("small")' on line 214, col 19
                    if _v is not None: write(_filter(_v, rawExpr='$t.images.retrieve_image_url("small")')) # from line 214, col 19.
                    write("""'>
""")
                write('''    </td>
''')
            write('''    <td>''')
            if VFN(VFFSL(SL,"t",True),"safe",False)('booktitle') : # generated from line 218, col 9
                _v =  VFN(VFFSL(SL,"t",True),"safe",False)('booktitle') 
                if _v is not None: write(_filter(_v))
            else:
                _v =  ""
                if _v is not None: write(_filter(_v))
            write('''</td>
    <td>''')
            if VFFSL(SL,"t.authors_as_string",True) : # generated from line 219, col 9
                _v =  VFFSL(SL,"t.authors_as_string",True) 
                if _v is not None: write(_filter(_v))
            else:
                _v =  ""
                if _v is not None: write(_filter(_v))
            write('''</td>
    <td>''')
            if VFFSL(SL,"t.isbn",True) : # generated from line 220, col 9
                _v =  VFFSL(SL,"t.isbn",True) 
                if _v is not None: write(_filter(_v))
            else:
                _v =  ""
                if _v is not None: write(_filter(_v))
            write('''</td>
    <td>''')
            if VFFSL(SL,"t.type",True) : # generated from line 221, col 9
                _v =  VFFSL(SL,"t.type",True) 
                if _v is not None: write(_filter(_v))
            else:
                _v =  ""
                if _v is not None: write(_filter(_v))
            write('''</td>
    <td>''')
            if VFN(VFFSL(SL,"t",True),"copies_in_status",False)("STOCK") : # generated from line 222, col 9
                _v =  VFN(VFFSL(SL,"t",True),"copies_in_status",False)("STOCK") 
                if _v is not None: write(_filter(_v))
            else:
                _v =  ""
                if _v is not None: write(_filter(_v))
            write('''</td>
    <td>''')
            if VFN(VFFSL(SL,"t",True),"distributors_as_string",False)() : # generated from line 223, col 9
                _v =  VFN(VFFSL(SL,"t",True),"distributors_as_string",False)() 
                if _v is not None: write(_filter(_v))
            else:
                _v =  ""
                if _v is not None: write(_filter(_v))
            write('''</td>
    <td>''')
            if VFN(VFFSL(SL,"t",True),"safe",False)('publisher') : # generated from line 224, col 9
                _v =  VFN(VFFSL(SL,"t",True),"safe",False)('publisher') 
                if _v is not None: write(_filter(_v))
            else:
                _v =  ""
                if _v is not None: write(_filter(_v))
            write('''</td>
    <td>''')
            if VFFSL(SL,"t.last_book_sold",True) : # generated from line 225, col 9
                _v =  VFFSL(SL,"t.last_book_sold.sold_when",True) 
                if _v is not None: write(_filter(_v))
            else:
                _v =  ""
                if _v is not None: write(_filter(_v))
            write('''</td>
''')
            # <td>#if $t.categories_as_string then $t.categories_as_string else ""#</td>
            write('''</tr>
''')
        write('''</tbody>
</table>

<div id=\'price_dialog\' class=\'query_dialog\' title=\'Query\'>
        Select price of item:
        <select id=\'price_select\'>
            <option value="" disabled="disabled" selected="selected"></option>
        </select>
</div>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # Choose item from inventory using usual search criteria
        # and add it to cart
        write('''



''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_ChooseItemTemplate= 'writeBody'

## END CLASS DEFINITION

if not hasattr(ChooseItemTemplate, '_initCheetahAttributes'):
    templateAPIClass = getattr(ChooseItemTemplate, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(ChooseItemTemplate)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://cheetahtemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=ChooseItemTemplate()).run()


