#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Cheetah.compat import unicode
from inventoryserver.Skeleton import Skeleton

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '3.0.0'
__CHEETAH_versionTuple__ = (3, 0, 0, 'final', 1)
__CHEETAH_genTime__ = 1510105566.2201312
__CHEETAH_genTimestamp__ = 'Wed Nov  8 01:46:06 2017'
__CHEETAH_src__ = 'TransactionsTemplate.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Nov  8 00:51:24 2017'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class TransactionsTemplate(Skeleton):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(TransactionsTemplate, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def pagetitle(self, **KWS):



        ## CHEETAH: generated from #def pagetitle at line 4, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''Transactions
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def body(self, **KWS):



        ## CHEETAH: generated from #def body at line 8, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''<h1>Transactions</h1>
<form action="/transactions" method="post">
<label class=\'textbox\' for=\'what\'>What</label> <input type=\'text\' class=\'textbox\' name=\'what\' id=\'what\' value="''')
        _v = VFFSL(SL,"what",True) # '${what}' on line 11, col 112
        if _v is not None: write(_filter(_v, rawExpr='${what}')) # from line 11, col 112.
        write('''"/> 
<label class=\'textbox\' for=\'action\'>Action</label> <input type=\'text\' class=\'textbox\' name=\'action\' id=\'action\' value="''')
        _v = VFFSL(SL,"action",True) # '${action}' on line 12, col 120
        if _v is not None: write(_filter(_v, rawExpr='${action}')) # from line 12, col 120.
        write('''"/> 
<label class=\'textbox\' for=\'begin_date\'>Begin Date</label><input type=\'text\' class=\'textbox\' name=\'begin_date\' id=\'begin_date\' value="''')
        _v = VFFSL(SL,"begin_date",True) # '${begin_date}' on line 13, col 135
        if _v is not None: write(_filter(_v, rawExpr='${begin_date}')) # from line 13, col 135.
        write('''"/>
<label class=\'textbox\' for=\'end_date\'>End Date</label><input type=\'text\' class=\'textbox\' name=\'end_date\' id=\'end_date\' value="''')
        _v = VFFSL(SL,"end_date",True) # '${end_date}' on line 14, col 127
        if _v is not None: write(_filter(_v, rawExpr='${end_date}')) # from line 14, col 127.
        write('''"/>
<input class="submit" type="submit">
<script type=\'text/javascript\'>
        Calendar.setup({
        inputField     :    \'begin_date\',   // id of the input field
        ifFormat       :    \'%Y-%m-%d\',       // format of the input field
        showsTime      :    false,
    });
    Calendar.setup({
        inputField     :    \'end_date\',   // id of the input field
        ifFormat       :    \'%Y-%m-%d\',       // format of the input field
        showsTime      :    false,
    });
        </script>

<table class="sortable" id="unique_id" >
<tbody>
<tr><th>date</th><th>action</th><th>info</th><th>amount</th><th>delete</th></tr>
''')
        for t in VFFSL(SL,"transactions",True): # generated from line 32, col 1
            write('''<tr>
<td>''')
            if VFFSL(SL,"t.date",True) : # generated from line 34, col 5
                _v =  VFFSL(SL,"t.date",True) 
                if _v is not None: write(_filter(_v))
            else:
                _v =  ""
                if _v is not None: write(_filter(_v))
            write('''</td>
<td>''')
            if VFFSL(SL,"t.action",True) : # generated from line 35, col 5
                _v =  VFFSL(SL,"t.action",True) 
                if _v is not None: write(_filter(_v))
            else:
                _v =  ""
                if _v is not None: write(_filter(_v))
            write('''</td>
<td>''')
            if VFN(VFFSL(SL,"t",True),"get_info",False)() : # generated from line 36, col 5
                _v =  VFN(VFFSL(SL,"t",True),"get_info",False)() 
                if _v is not None: write(_filter(_v))
            else:
                _v =  ""
                if _v is not None: write(_filter(_v))
            write('''</td>
<td>''')
            if VFFSL(SL,"t.amount",True) : # generated from line 37, col 5
                _v =  VFFSL(SL,"t.amount",True) 
                if _v is not None: write(_filter(_v))
            else:
                _v =  ""
                if _v is not None: write(_filter(_v))
            write('''</td>
<td><input type="image" name="deleteid" value="''')
            _v = VFFSL(SL,"t.id",True) # '$t.id' on line 38, col 48
            if _v is not None: write(_filter(_v, rawExpr='$t.id')) # from line 38, col 48.
            write('''" src="delete.png"/></td>
</tr>
''')
        write('''</tbody>
</table>
</form>
<br />

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_TransactionsTemplate= 'writeBody'

## END CLASS DEFINITION

if not hasattr(TransactionsTemplate, '_initCheetahAttributes'):
    templateAPIClass = getattr(TransactionsTemplate, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(TransactionsTemplate)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://cheetahtemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=TransactionsTemplate()).run()


