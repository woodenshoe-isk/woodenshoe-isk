#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Skeleton import Skeleton

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.3'
__CHEETAH_versionTuple__ = (2, 4, 3, 'development', 0)
__CHEETAH_genTime__ = 1316642131.860796
__CHEETAH_genTimestamp__ = 'Wed Sep 21 17:55:31 2011'
__CHEETAH_src__ = 'CheckoutTemplate.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Jun  8 16:13:20 2011'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class CheckoutTemplate(Skeleton):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(CheckoutTemplate, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def pagetitle(self, **KWS):



        ## CHEETAH: generated from #def pagetitle at line 4, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''Checkout
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def body(self, **KWS):



        ## CHEETAH: generated from #def body at line 8, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''<h1>Your cart contains:</h1>
<form action="/checkout">
<table>
''')
        for q in VFFSL(SL,"quantities",True): # generated from line 12, col 1
            write(u'''<tr><td><b>''')
            _v = VFFSL(SL,"q",True)[1] # u'${q[1]}' on line 13, col 12
            if _v is not None: write(_filter(_v, rawExpr=u'${q[1]}')) # from line 13, col 12.
            write(u'''</b></td><td><b>''')
            _v = VFN(VFFSL(SL,"q",True)[0],"title.booktitle",True) # u'${q[0].title.booktitle}' on line 13, col 35
            if _v is not None: write(_filter(_v, rawExpr=u'${q[0].title.booktitle}')) # from line 13, col 35.
            write(u'''</b></td></tr>
''')
        write(u'''</table>
<br />
<input class="submit-inline" type="submit" name="change" value="change quantities"/><br />
Change status from: <input label="from" type="text" name="status_from" value="''')
        _v = VFFSL(SL,"status_from",True) # u'$status_from' on line 18, col 79
        if _v is not None: write(_filter(_v, rawExpr=u'$status_from')) # from line 18, col 79.
        write(u'''">
To: <input  label="to" type="text" name="status_to" value="''')
        _v = VFFSL(SL,"status_to",True) # u'$status_to' on line 19, col 60
        if _v is not None: write(_filter(_v, rawExpr=u'$status_to')) # from line 19, col 60.
        write(u'''">
<input class="submit-inline" type="submit" name="restatus" value="change status" />
<br /><br/>
Price Schedule: 
<select name="schedule">
''')
        for schedule in VFFSL(SL,"schedules",True): # generated from line 24, col 1
            write(u'''<option>''')
            _v = VFFSL(SL,"schedule",True)[0] # u'${schedule[0]}' on line 25, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'${schedule[0]}')) # from line 25, col 9.
            write(u'''</option>
''')
        write(u'''</select>
Seller: <input  type="text" name="cashier" value="" />
<input class="submit-inline" type="submit" name="finalize" value="make sale" />
<br/><br />
<input class="submit-inline" type="submit" name="delete" onclick="return confirm(\'Are you sure?\');"  value="delete collected copies" />
</form>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_CheckoutTemplate= 'writeBody'

## END CLASS DEFINITION

if not hasattr(CheckoutTemplate, '_initCheetahAttributes'):
    templateAPIClass = getattr(CheckoutTemplate, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(CheckoutTemplate)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=CheckoutTemplate()).run()


