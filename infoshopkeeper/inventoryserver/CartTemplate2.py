#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Skeleton import Skeleton
from etc import departments

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.3'
__CHEETAH_versionTuple__ = (2, 4, 3, 'development', 0)
__CHEETAH_genTime__ = 1316642131.882237
__CHEETAH_genTimestamp__ = 'Wed Sep 21 17:55:31 2011'
__CHEETAH_src__ = 'CartTemplate2.tmpl'
__CHEETAH_srcLastModified__ = 'Tue Sep 20 20:58:16 2011'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class CartTemplate2(Skeleton):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(CartTemplate2, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def headscripts(self, **KWS):



        ## CHEETAH: generated from #def headscripts at line 3, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''<script type=\'text/javascript\'>                                         
\tjQuery(document).ready( function(){
\t    var inventory_data1=\'\';
\t    
        jQuery.ajaxSetup({  \'cache\':false,
                            \'error\':function(XMLHttpRequest,textStatus, errorThrown) {   
                                alert(textStatus + \'\\r\' +
                                      errorThrown + \'\\r\' +
                                      XMLHttpRequest.responseText);
                            }
        });
        
        jQuery(\'#void-toggle\').button();

        jQuery( "#isbn_not_found_error" ).dialog({
            autoOpen: false,
            modal: true,
            buttons: {
                Ok: function() {
                    jQuery(this).dialog( \'close\' );
                }
            }
        });
    
        jQuery(\'.my-forms\').each( function(){
            var dlg=jQuery(this).dialog( {
                autoOpen: false,
                modal: true,
                open: function(event, ui) {
                    jQuery(this).parent().parent();
                },
                close: function() {
                    jQuery(this).find(\'.isbnfield\').val(\'\');
                    jQuery(this).find(\'.title_list\').children().remove();
                },
                buttons: {
                    Cancel: function(){
                        jQuery(this).dialog(\'close\');
                    },
                    \'Add to Order\': function(){
                        console.log(inventory_data1);
                        console.log(JSON.stringify(inventory_data1));
                        jQuery(\'#cart_table > tbody\').append(\'<tr><td>\' + inventory_data1 + \'</td></tr>\');
                        jQuery.post(\'/register/add_item_to_cart\', escape(JSON.stringify(inventory_data1)));
                        jQuery(this).dialog(\'close\');
                    }
                }
            });
            jQuery(this).parent().siblings(\'.main\').find(\'.department_button:#\'+jQuery(this).attr(\'data-name\')).click( function() {
                dlg.dialog(\'open\');
                return false;
            });
        });
        
        jQuery(\'.isbnfield\').blur( function(evt) {          
            var category_data=jQuery(this).parent().parent().data()
            var isbnstring=jQuery(this).val();
            var title_list=jQuery(this).closest(\'div\').find(\'.title_list\')
            var isbn_error_alert=jQuery(this).closest(\'body\').find(\'#isbn_not_found_error\');
            isbnstring=isbnstring.toLowerCase();
            isbnstring=isbnstring.replace(/\\s+/g, \' \');

            if (isbnstring.length>11) {
                isbnstring=isbnstring.replace(/[\\s-]/g, \'\');
            }
            
            if (isbnstring.length>0 && category_data.is_inventoried_item) {
                jQuery.getJSON( \'/register/get_item_by_isbn\', {\'isbn\':isbnstring}, function(inventory_data){
                    console.log(inventory_data);
                    inventory_data1=inventory_data
                    if (category_data.is_inventoried_item) {
                        if (inventory_data.title) {
                            title_list.append(\'<li>\'+category_data.label+\'</li>\');
                            title_list.append(\'<li>\'+inventory_data.title.booktitle+\'</li>\'); 
                            title_list.append(\'<li>\'+inventory_data.book.ourprice+\'</li>\');
                        } else {
                            isbn_error_alert.dialog(\'open\');
                        }
                    } else {
                            title_list.append(\'<li>\'+category_data.label+\'</li>\');
                            title_list.append(\'<li>\'+isbnstring+\'</li>\');
                    }
                });
            }

            jQuery(this).val(isbnstring);
            evt.preventDefault();
        });
    });
</script>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def pagetitle(self, **KWS):



        ## Generated from #def pagetitle: Build Cart... at line 95, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''Build Cart...''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def body(self, **KWS):



        ## CHEETAH: generated from #def body at line 97, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u"""    <label for='void-toggle'>Void</label>
    <input type='checkbox' id='void-toggle' />
""")
        for dep in VFFSL(SL,"departments",True): # generated from line 101, col 5
            write(u"""        <button id='""")
            _v = VFN(VFFSL(SL,"departments",True)[VFFSL(SL,"dep",True)],"name",True) # u'$departments[$dep].name' on line 102, col 21
            if _v is not None: write(_filter(_v, rawExpr=u'$departments[$dep].name')) # from line 102, col 21.
            write(u"""' class='department_button' value=""")
            _v = VFFSL(SL,"dep",True) # u'$dep' on line 102, col 78
            if _v is not None: write(_filter(_v, rawExpr=u'$dep')) # from line 102, col 78.
            write(u'''>''')
            _v = VFFSL(SL,"departments",True)[VFFSL(SL,"dep",True)]['label'] # u"$departments[$dep]['label']" on line 102, col 83
            if _v is not None: write(_filter(_v, rawExpr=u"$departments[$dep]['label']")) # from line 102, col 83.
            write(u"""</button>
        <div id='my-form-""")
            _v = VFN(VFFSL(SL,"departments",True)[VFFSL(SL,"dep",True)],"name",True) # u'$departments[$dep].name' on line 103, col 26
            if _v is not None: write(_filter(_v, rawExpr=u'$departments[$dep].name')) # from line 103, col 26.
            write(u"""' class='my-forms' title='Enter ISBN or Price' data-name=""")
            _v = VFN(VFFSL(SL,"departments",True)[VFFSL(SL,"dep",True)],"name",True) # u'$departments[$dep].name' on line 103, col 106
            if _v is not None: write(_filter(_v, rawExpr=u'$departments[$dep].name')) # from line 103, col 106.
            write(u''' data-label=''')
            _v = VFN(VFFSL(SL,"departments",True)[VFFSL(SL,"dep",True)],"label",True) # u'$departments[$dep].label' on line 103, col 141
            if _v is not None: write(_filter(_v, rawExpr=u'$departments[$dep].label')) # from line 103, col 141.
            write(u''' data-is_inventoried_item=''')
            _v = VFN(VFFSL(SL,"departments",True)[VFFSL(SL,"dep",True)],"isInventoriedItem",True) # u'$departments[$dep].isInventoriedItem' on line 103, col 191
            if _v is not None: write(_filter(_v, rawExpr=u'$departments[$dep].isInventoriedItem')) # from line 103, col 191.
            write(u''' data-is_taxable=''')
            _v = VFN(VFFSL(SL,"departments",True)[VFFSL(SL,"dep",True)],"isTaxable",True) # u'$departments[$dep].isTaxable' on line 103, col 244
            if _v is not None: write(_filter(_v, rawExpr=u'$departments[$dep].isTaxable')) # from line 103, col 244.
            write(u""">
            <form action='' method='get'>
                <input id='isbn' class='isbnfield' type='text' name='isbn' /><br>
           </form>
            <div id='title_list_panel' class='title_list_panel' name='title_list_panel'>
                <ul id='title_list' class='title_list' name='title_list'></ul>
            </div>  
        </div>
""")
        write(u"""    <div id = 'cart_panel'>
        <table id='cart_table'>
            <thead></thead>
            <tbody></tbody>
        </table>
    </div>
    <div id='isbn_not_found_error' class='error_dialog' title='Error: ISBN not found'>
        Check the ISBN again or use the search button to search the inventory by attributes.
    </div>

""")
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_CartTemplate2= 'writeBody'

## END CLASS DEFINITION

if not hasattr(CartTemplate2, '_initCheetahAttributes'):
    templateAPIClass = getattr(CartTemplate2, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(CartTemplate2)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=CartTemplate2()).run()


