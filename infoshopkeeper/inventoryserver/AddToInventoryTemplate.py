#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Skeleton import Skeleton

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.3'
__CHEETAH_versionTuple__ = (2, 4, 3, 'development', 0)
__CHEETAH_genTime__ = 1316642131.912769
__CHEETAH_genTimestamp__ = 'Wed Sep 21 17:55:31 2011'
__CHEETAH_src__ = 'AddToInventoryTemplate.tmpl'
__CHEETAH_srcLastModified__ = 'Mon Jul 25 15:12:11 2011'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class AddToInventoryTemplate(Skeleton):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(AddToInventoryTemplate, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def headscripts(self, **KWS):



        ## CHEETAH: generated from #def headscripts at line 4, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''<script type="text/javascript" src="/javascript/jquery.form.js"></script>
<script type="text/javascript">                                         
\tvar isbnDirty = false;
\tjQuery(document).ready(function() {
        jQuery.ajaxSetup({"error":function(XMLHttpRequest,textStatus, errorThrown) {   
                alert(textStatus);
                alert(errorThrown);
                alert(XMLHttpRequest.responseText);
          
        }});
\t\tjQuery(\'.textbox\').bind(\'keypress\', function(evt) {
               \t\tif (evt.keyCode == 13||evt.chatCode == 13) {
                    \t\t/* FOCUS ELEMENT */
                    \t\tvar inputs = jQuery(this).parents("form").eq(0).find(":input");
                    \t\tvar idx = inputs.index(this);
 
                    \t\tif (idx == inputs.length - 1) {
                        \t\tinputs[0].select()
                    \t\t} else {
                        \t\tinputs[idx + 1].focus(); //  handles submit buttons
                        \t\tinputs[idx + 1].select();
                    \t\t}\t
                    \t\treturn false;
               \t\t}\t
\t\t});
\t\tjQuery(\'#isbn\').change( function() {
\t\t\tvar isbnstring=jQuery(this).val();
\t\t\tisbnstring=isbnstring.toLowerCase();

\t\t\tif (isbnstring.length>11) {
\t\t\t\tisbnstring.replace(\'/[\\s-]/g\', \'\');
\t\t\t}

\t\t\tif (isbnDirty == false) {
\t\t\t\tjQuery.getJSON( \'/search_isbn\', {\'isbn\':isbnstring}, function(data){
\t\t\t\t\tjQuery.each(data, function(key, value) {
\t\t\t\t\t\tif (key == \'publisher\') {
\t\t\t\t\t\t\tjQuery(\'#publisher\').val(value);
\t\t\t\t\t\t} else if ( key == \'authors_as_string\') {
\t\t\t\t\t\t\tjQuery(\'#authors\').val(value);
\t\t\t\t\t\t} else if ( key == \'categories_as_string\') {
\t\t\t\t\t\t\tjQuery(\'#categories\').val(value);
\t\t\t\t\t\t} else if ( key == \'title\') {
\t\t\t\t\t\t\tjQuery(\'#title\').val(value);
\t\t\t\t\t\t} else if ( key == \'list_price\') {
\t\t\t\t\t\t\tjQuery(\'#listprice\').val(value);
\t\t\t\t\t\t\tjQuery(\'#ourprice\').val(value);
\t\t\t\t\t\t} else if (key == \'isbn\') {
\t\t\t\t\t\t\tjQuery(\'#isbn\').val(value);
\t\t\t\t\t\t} else if ( key == \'format\') {
\t\t\t\t\t\t\tjQuery(\'#types\').val(value);
\t\t\t\t\t\t} else if (key ==  \'kind\') {
\t\t\t\t\t\t\tjQuery(\'#kind_name\').val(value);
\t\t\t\t\t\t} else if ( key == \'known_title\') {
\t\t\t\t\t\t\tjQuery(\'#known_title\').val(value);
\t\t\t\t\t\t}
\t\t\t\t\t});
\t\t\t\t});
\t\t\t\tisbnDirty = true;

\t\t\t}
\t\t\treturn false;
\t\t});
\t\tjQuery(\'#add_to_inventory_form\').ajaxForm( {url:\'/add_item_to_inventory\', clearForm:false, success:function(){
\t\t\t\tjQuery("#add_to_inventory_form .textbox").not(\'#distributor, #quantity, #location, #owner, #status, #kind_name\').each(function() {
\t\t\t\t\tjQuery(this).val("");
\t\t\t\t});
\t\t\t\tjQuery("#quantity").val(1);
\t\t\t\tisbnDirty=false;
\t\t\t}
\t\t});
\t\tjQuery(\'#add_to_inventory_form\').bind(\'reset\', function(){
\t\t\tjQuery("#add_to_inventory_form .textbox").not(\'#distributor, #quantity, #location, #owner, #status, #kind_name\').each(function() {
\t\t\t\tjQuery(this).val("");
\t\t\t});
\t\t\tjQuery("#quantity").val(1);
\t\t\tisbnDirty=false;
\t\t});
\t});
</script>   
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def pagetitle(self, **KWS):



        ## CHEETAH: generated from #def pagetitle at line 87, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''Add item to  inventory
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def body(self, **KWS):



        ## CHEETAH: generated from #def body at line 91, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''<h1>Add to Inventory</h1>
<br />
<form id="add_to_inventory_form" method="post" action="/add_item_to_inventory" //~style="visibility:hidden; display:none">

<label class="textbox" for="isbn">Item ID (UPC or ISBN)</label> 
<input class="textbox" type="text" id="isbn" name="isbn" value="''')
        _v = VFFSL(SL,"isbn",True) # u'$isbn' on line 97, col 65
        if _v is not None: write(_filter(_v, rawExpr=u'$isbn')) # from line 97, col 65.
        write(u'''" /><br />

<label class="textbox" for "quantity">Quantity</label>
<input class="textbox" type="text" id="quantity", name="quantity", value="''')
        _v = VFFSL(SL,"quantity",True) # u'$quantity' on line 100, col 75
        if _v is not None: write(_filter(_v, rawExpr=u'$quantity')) # from line 100, col 75.
        write(u'''"/><br />

<label class="textbox" for="title">Title</label> 
<input class="textbox" type="text" id="title" name="title" value="''')
        _v = VFFSL(SL,"title",True) # u'$title' on line 103, col 67
        if _v is not None: write(_filter(_v, rawExpr=u'$title')) # from line 103, col 67.
        write(u'''" /><br />

<label class="textbox" for="authors">Author</label> 
<input class="textbox" type="text" name="authors" id="authors" value="''')
        _v = VFFSL(SL,"authors",True) # u'$authors' on line 106, col 71
        if _v is not None: write(_filter(_v, rawExpr=u'$authors')) # from line 106, col 71.
        write(u'''" /><br />

<label class="textbox" for="listprice">List Price</label>
<input class="textbox" type="text" name="listprice" id="listprice" value="''')
        _v = VFFSL(SL,"listprice",True) # u'$listprice' on line 109, col 75
        if _v is not None: write(_filter(_v, rawExpr=u'$listprice')) # from line 109, col 75.
        write(u'''" /><br />

<label class="textbox" for="ourprice">Our Price</label>
<input class="textbox" type="text" name="ourprice" id="ourprice" value="''')
        _v = VFFSL(SL,"ourprice",True) # u'$ourprice' on line 112, col 73
        if _v is not None: write(_filter(_v, rawExpr=u'$ourprice')) # from line 112, col 73.
        write(u'''" /><br />

<label class="textbox" for="publisher">Publisher</label> 
<input class="textbox" type="text" name="publisher" id="publisher" value="''')
        _v = VFFSL(SL,"publisher",True) # u'$publisher' on line 115, col 75
        if _v is not None: write(_filter(_v, rawExpr=u'$publisher')) # from line 115, col 75.
        write(u'''" /><br />

<label class="textbox" for="categories">Keyword</label> 
<input class="textbox" type="text" name="categories" id="categories" value="''')
        _v = VFFSL(SL,"categories",True) # u'$categories' on line 118, col 77
        if _v is not None: write(_filter(_v, rawExpr=u'$categories')) # from line 118, col 77.
        write(u'''" /><br />

<label class="textbox" for="distributor">Distributor</label> 
<select class="textbox" id="distributor"  name="distributor">
''')
        for d in VFFSL(SL,"distributors",True): # generated from line 122, col 1
            write(u"""<option value='""")
            _v = VFFSL(SL,"d",True) # u'$d' on line 123, col 16
            if _v is not None: write(_filter(_v, rawExpr=u'$d')) # from line 123, col 16.
            write(u"""' 
""")
            if "%s" %(VFFSL(SL,"d",True))==VFFSL(SL,"distributor",True): # generated from line 124, col 1
                write(u'''selected="true" 
''')
            write(u'''>''')
            _v = VFFSL(SL,"d",True) # u'$d' on line 127, col 2
            if _v is not None: write(_filter(_v, rawExpr=u'$d')) # from line 127, col 2.
            write(u'''</option>
''')
        write(u'''</select><br />

<label class="textbox" for="location">Location</label> 
<select class="textbox" id="location" name="location">
''')
        i = 0
        for loc in VFFSL(SL,"locations",True): # generated from line 134, col 1
            write(u'''<option id=''')
            _v = VFFSL(SL,"i",True) # u'$i' on line 135, col 12
            if _v is not None: write(_filter(_v, rawExpr=u'$i')) # from line 135, col 12.
            write(u""" value='""")
            _v = VFFSL(SL,"loc.id",True) # u'$loc.id' on line 135, col 22
            if _v is not None: write(_filter(_v, rawExpr=u'$loc.id')) # from line 135, col 22.
            write(u"""' 
""")
            if "%s" %(VFFSL(SL,"loc.id",True))==VFFSL(SL,"location",True): # generated from line 136, col 1
                write(u'''selected="true" 
''')
            write(u'''>''')
            _v = VFFSL(SL,"loc.locationName",True) # u'$loc.locationName' on line 139, col 2
            if _v is not None: write(_filter(_v, rawExpr=u'$loc.locationName')) # from line 139, col 2.
            write(u'''</option>
''')
            i = VFFSL(SL,"i",True)+1
        write(u'''</select><br />

<label class="textbox" for="owner">Owner</label> 
<input class="textbox" type="text" name="owner" id="owner" value="''')
        _v = VFFSL(SL,"owner",True) # u'$owner' on line 145, col 67
        if _v is not None: write(_filter(_v, rawExpr=u'$owner')) # from line 145, col 67.
        write(u'''" /><br />


<label class="textbox" for="status">Status</label>
<fieldset id="status">
STOCK<input type="radio" name="status" id="status" value="STOCK" 
''')
        if  VFFSL(SL,"status",True) == 'STOCK': # generated from line 151, col 1
            write(u'''checked
''')
        write(u'''> 
SOLD<input type="radio" name="status" id="status" value="SOLD"
''')
        if VFFSL(SL,"status",True) == 'SOLD': # generated from line 156, col 1
            write(u'''checked
''')
        write(u'''>
</fieldset>
<br />

<label class="textbox" for="tag">Tag</label> 
<input class="textbox" type="text" id="tag" name="tag" value="''')
        _v = VFFSL(SL,"tag",True) # u'$tag' on line 164, col 63
        if _v is not None: write(_filter(_v, rawExpr=u'$tag')) # from line 164, col 63.
        write(u'''" /><br />

<label class="textbox" for="kind_name">Kind</label> 
<select class="textbox" id="kind_name" name="kind_name">
''')
        for k in VFFSL(SL,"kinds",True): # generated from line 168, col 1
            write(u"""<option value='""")
            _v = VFFSL(SL,"k.kindName",True) # u'$k.kindName' on line 169, col 16
            if _v is not None: write(_filter(_v, rawExpr=u'$k.kindName')) # from line 169, col 16.
            write(u"""' 
""")
            if "%s" %(VFFSL(SL,"k.id",True))==VFFSL(SL,"kind",True): # generated from line 170, col 1
                write(u'''selected="true" 
''')
            write(u'''>''')
            _v = VFFSL(SL,"k.kindName",True) # u'$k.kindName' on line 173, col 2
            if _v is not None: write(_filter(_v, rawExpr=u'$k.kindName')) # from line 173, col 2.
            write(u'''</option>
''')
        write(u'''</select><br />

<label class="textbox" for="types">Format</label> 
<select class="textbox" id="types" name="types">
''')
        for f in VFFSL(SL,"formats",True): # generated from line 179, col 1
            write(u"""<option value='""")
            _v = VFFSL(SL,"f",True) # u'$f' on line 180, col 16
            if _v is not None: write(_filter(_v, rawExpr=u'$f')) # from line 180, col 16.
            write(u"""' 
""")
            if "%s" %(VFFSL(SL,"f",True))==VFFSL(SL,"format",True): # generated from line 181, col 1
                write(u'''selected="true" 
''')
            write(u'''>''')
            _v = VFFSL(SL,"f",True) # u'$f' on line 184, col 2
            if _v is not None: write(_filter(_v, rawExpr=u'$f')) # from line 184, col 2.
            write(u'''</option>
''')
        write(u"""</select><br />

<input class='textbox' type='hidden' id='known_title' name='known_title' value='""")
        _v = VFFSL(SL,"known_title",True) # u'$known_title' on line 188, col 81
        if _v is not None: write(_filter(_v, rawExpr=u'$known_title')) # from line 188, col 81.
        write(u'''\'/>

<input class="submit" type="submit" value=\'Add to Inventory\'>
<input class=\'reset\' type=\'reset\' value=\'cancel\'>
<br />
</form>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''from Skeleton import Skeleton



''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_AddToInventoryTemplate= 'writeBody'

## END CLASS DEFINITION

if not hasattr(AddToInventoryTemplate, '_initCheetahAttributes'):
    templateAPIClass = getattr(AddToInventoryTemplate, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(AddToInventoryTemplate)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=AddToInventoryTemplate()).run()


