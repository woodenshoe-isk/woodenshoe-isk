#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Cheetah.compat import unicode
from inventoryserver.Skeleton import Skeleton

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '3.0.0'
__CHEETAH_versionTuple__ = (3, 0, 0, 'final', 1)
__CHEETAH_genTime__ = 1510105566.0923994
__CHEETAH_genTimestamp__ = 'Wed Nov  8 01:46:06 2017'
__CHEETAH_src__ = 'SelectSpecialOrderTemplate.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Nov  8 00:51:24 2017'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class SelectSpecialOrderTemplate(Skeleton):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(SelectSpecialOrderTemplate, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def pagetitle(self, **KWS):



        ## CHEETAH: generated from #def pagetitle at line 6, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write("""    Search results for string '""")
        _v = VFFSL(SL,"authorOrTitle",True) # '$authorOrTitle' on line 7, col 32
        if _v is not None: write(_filter(_v, rawExpr='$authorOrTitle')) # from line 7, col 32.
        write("""'
""")
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def headscripts(self, **KWS):



        ## CHEETAH: generated from #def headscripts at line 10, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''<script type="text/javascript" src="/javascript/jquery.validate.min.js"></script>
<script type="text/javascript">
    jQuery(document).ready( function(){
//         //Ajax setup for error handling
//         jQuery.ajaxSetup({"error":function(XMLHttpRequest,textStatus, errorThrown) {   
//                 alert(textStatus + \'\\\\r\\\\r\' + errorThrown
//                     + \'\\\\r\\\\r\' + XMLHttpRequest.responseText);
//         }});

        jQuery(\'#results_table\').dataTable({    \'aSorting\':[[1, \'asc\']],
                                                \'sPaginationType\':\'simple_numbers\',
                                                "iDisplayLength": 50});
        
        //Special order an item. Checks by
        //keyword both in db and amazon.
        row_click_handler = function(event) {
                    event.preventDefault();
                    item = {}
                    item[\'isbn\']=jQuery(this).children()[0].innerHTML;
                    item[\'title\']=jQuery(this).children()[1].innerHTML;
                    item[\'authors\']=jQuery(this).children()[2].innerHTML;
                    item[\'publisher\']=jQuery(this).children()[3].innerHTML;
                    item[\'categories\']=jQuery(this).children()[4].innerHTML;
                    item[\'format\']= jQuery(this).children()[6].innerHTML;
                    item[\'kind\']=jQuery(this).children()[7].innerHTML;
                    item[\'known_title_id\']=jQuery(this).children()[8].innerHTML;

                    //add item to special order, and update page
                    special_order_args={item:JSON.stringify(item), specialOrderID:jQuery(\'#special_order_id\').text()};
                    alert(special_order_args);
                    jQuery.post(\'/specialorder/add_to_special_order\', special_order_args, function() {
                        //go back to special order edit page, success or not.
                        //will reflect on reload.
                        document.location.href= \'/specialorder/special_order_edit?id=\' + jQuery(\'#special_order_id\').text();
                    });
                    
                    return false;
        }
        //Desktops open on doubleclick.
        //IOS & android use single click.
         if (navigator.userAgent.match(/ipad|iphone|ios|android/i) == null) {
            jQuery(\'#results_table  tbody tr\').dblclick(row_click_handler);
        } else {
            jQuery(\'#results_table tbody tr\').click(row_click_handler);
        }
      });
</script
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def body(self, **KWS):



        ## CHEETAH: generated from #def body at line 60, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write("""    <h1>Search Results for '""")
        _v = VFFSL(SL,"authorOrTitle",True) # '$authorOrTitle' on line 61, col 29
        if _v is not None: write(_filter(_v, rawExpr='$authorOrTitle')) # from line 61, col 29.
        write("""'</h1>
    <p id='special_order_id' hidden>""")
        _v = VFFSL(SL,"specialOrderID",True) # '$specialOrderID' on line 62, col 37
        if _v is not None: write(_filter(_v, rawExpr='$specialOrderID')) # from line 62, col 37.
        write('''</p>
    <table class="sortable" id="results_table" >
        <thead>
          <tr>
            <th>ISBN</th>
            <th>Title</th>
            <th>Authors</th>
            <th>Publisher</th>
            <th>Keywords</th>
            <th>List Price</th>
            <th>Format</th>
            <th>Kind</th>
            <th>Known Title</th>
          </tr>
        </thead>
        <tbody>
''')
        for r in VFN(VFFSL(SL,"resultset",True),"values",False)(): # generated from line 78, col 10
            write('''              <tr>
''')
            try              : # generated from line 80, col 21
                write('''                        <td>''')
                if VFFSL(SL,"r",True)['isbn'] : # generated from line 81, col 29
                    _v =  VFFSL(SL,"r",True)['isbn'] 
                    if _v is not None: write(_filter(_v))
                else:
                    _v =  ""
                    if _v is not None: write(_filter(_v))
                write('''</td>
                        <td>''')
                if VFFSL(SL,"r",True)['title'] : # generated from line 82, col 29
                    _v =  VFFSL(SL,"r",True)['title'] 
                    if _v is not None: write(_filter(_v))
                else:
                    _v =  ""
                    if _v is not None: write(_filter(_v))
                write('''</td>
                        <td>''')
                if VFFSL(SL,"r",True)['authors_as_string'] : # generated from line 83, col 29
                    _v =  VFFSL(SL,"r",True)['authors_as_string'] 
                    if _v is not None: write(_filter(_v))
                else:
                    _v =  ""
                    if _v is not None: write(_filter(_v))
                write('''</td>
                        <td>''')
                if VFFSL(SL,"r",True)['publisher'] : # generated from line 84, col 29
                    _v =  VFFSL(SL,"r",True)['publisher'] 
                    if _v is not None: write(_filter(_v))
                else:
                    _v =  ""
                    if _v is not None: write(_filter(_v))
                write('''</td>
                        <td>''')
                if VFFSL(SL,"r",True)['categories_as_string'] : # generated from line 85, col 29
                    _v =  VFFSL(SL,"r",True)['categories_as_string'] 
                    if _v is not None: write(_filter(_v))
                else:
                    _v =  ""
                    if _v is not None: write(_filter(_v))
                write('''</td>
                        <td>''')
                if VFFSL(SL,"r",True)['list_price'] : # generated from line 86, col 29
                    _v =  VFFSL(SL,"r",True)['list_price'] 
                    if _v is not None: write(_filter(_v))
                else:
                    _v =  ""
                    if _v is not None: write(_filter(_v))
                write('''</td>
                        <td>''')
                if VFFSL(SL,"r",True)['format'] : # generated from line 87, col 29
                    _v =  VFFSL(SL,"r",True)['format'] 
                    if _v is not None: write(_filter(_v))
                else:
                    _v =  ""
                    if _v is not None: write(_filter(_v))
                write('''</td>
                        <td>''')
                if VFFSL(SL,"r",True)['kind'] : # generated from line 88, col 29
                    _v =  VFFSL(SL,"r",True)['kind'] 
                    if _v is not None: write(_filter(_v))
                else:
                    _v =  ""
                    if _v is not None: write(_filter(_v))
                write('''</td>
                        <td>''')
                if VFN(VFN(VFFSL(SL,"r",True),"get",False)('known_title'),"id",True) : # generated from line 89, col 29
                    _v =  VFN(VFN(VFFSL(SL,"r",True),"get",False)('known_title'),"id",True) 
                    if _v is not None: write(_filter(_v))
                else:
                    _v =  ""
                    if _v is not None: write(_filter(_v))
                write('''</td>
''')
            except: # generated from line 90, col 21
                write('''                        <td</td>
''')
            write('''              </tr>
''')
        write('''        </tbody>
    </table>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # Edit Special Order information
        write('''



''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_SelectSpecialOrderTemplate= 'writeBody'

## END CLASS DEFINITION

if not hasattr(SelectSpecialOrderTemplate, '_initCheetahAttributes'):
    templateAPIClass = getattr(SelectSpecialOrderTemplate, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(SelectSpecialOrderTemplate)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://cheetahtemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=SelectSpecialOrderTemplate()).run()


