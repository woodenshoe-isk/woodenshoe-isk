#!/usr/bin/env python


##################################################
## DEPENDENCIES
import sys
import os
import os.path

try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import (
    NotFound,
    valueForName,
    valueFromSearchList,
    valueFromFrameOrSearchList,
)
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Cheetah.compat import unicode
from inventoryserver.Skeleton import Skeleton

##################################################
## MODULE CONSTANTS
VFFSL = valueFromFrameOrSearchList
VFSL = valueFromSearchList
VFN = valueForName
currentTime = time.time
__CHEETAH_version__ = "3.0.0"
__CHEETAH_versionTuple__ = (3, 0, 0, "final", 1)
__CHEETAH_genTime__ = 1510105565.9341302
__CHEETAH_genTimestamp__ = "Wed Nov  8 01:46:05 2017"
__CHEETAH_src__ = "ChooseItemForISBNTemplate.tmpl"
__CHEETAH_srcLastModified__ = "Wed Nov  8 00:51:24 2017"
__CHEETAH_docstring__ = "Autogenerated by Cheetah: The Python-Powered Template Engine"

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
        "This template was compiled with Cheetah version"
        " %s. Templates compiled before version %s must be recompiled."
        % (__CHEETAH_version__, RequiredCheetahVersion)
    )

##################################################
## CLASSES


class ChooseItemForISBNTemplate(Skeleton):

    ##################################################
    ## CHEETAH GENERATED METHODS

    def __init__(self, *args, **KWs):

        super(ChooseItemForISBNTemplate, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = "searchList namespaces filter filtersLib errorCatcher".split()
            for k, v in KWs.items():
                if k in allowedKWs:
                    cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)

    def pagetitle(self, **KWS):

        ## CHEETAH: generated from #def pagetitle at line 7, col 1.
        trans = KWS.get("trans")
        if (
            not trans
            and not self._CHEETAH__isBuffering
            and not callable(self.transaction)
        ):
            trans = self.transaction  # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter

        ########################################
        ## START - generated method body

        write(
            """Search the inventory
"""
        )

        ########################################
        ## END - generated method body

        return _dummyTrans and trans.response().getvalue() or ""

    def headscripts(self, **KWS):

        ## CHEETAH: generated from #def headscripts at line 11, col 1.
        trans = KWS.get("trans")
        if (
            not trans
            and not self._CHEETAH__isBuffering
            and not callable(self.transaction)
        ):
            trans = self.transaction  # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter

        ########################################
        ## START - generated method body

        write(
            """<script src="/javascript/jquery.fixedheadertable.js"></script>
<script type="text/javascript">                                         
    //Make lesser used fields hideable
    jQuery(document).ready( function(){
        //.showHideSearchForm hidden 
        jQuery(".showHideSearchForm").hide()

        //this is where we open/close disclosure triangle
        //array is open/closed options for span class
        var disclosureTriContent = [\'<span class="show_hide_disc_triangle ui-state-default ui-corner-all" data-subscript="0"><span class="ui-icon ui-icon-triangle-1-e"></span><span class="text" style="display: block; ">More options...</span></span>\',
            \'<span class="show_hide_disc_triangle ui-state-default ui-corner-all" data-subscript="1"><span class="ui-icon ui-icon-triangle-1-s"></span><span class="text" style="display: block; ">Fewer options...</span></span>\'];

        //start out with .slidingDiv hidden
        jQuery(".slidingDiv").hide();
        jQuery(".show_hide_disc_triangle").show();
        jQuery(\'.show_hide_div\').click(function(){
            //slidetoggle hides/shows div
            jQuery(".slidingDiv").slideToggle();
            //swap out label on show/hide fields button
            jQuery(this).html(disclosureTriContent[(jQuery(this).find(\'.show_hide_disc_triangle\').data(\'subscript\') + 1) % 2]);
            jQuery(this).find(\'.show_hide_disc_triangle\').show();
            return false
        });
        
        //hide book id column 
        //jQuery(\'#results_table td:nth-child(9), #results_table th:nth-child(9)\').hide();
        
        //dataTable gives us pagination, etc for free
        var resultsTable = jQuery(\'#results_table\').dataTable({    \'aSorting\':[[1, \'asc\']],
                                                "order":[[1, \'asc\']],
                                                \'sPaginationType\':\'simple_numbers\',
                                                \'columnDefs\': [
                                                    { targets: [0], visible: false},
                                                ],
                                                "bJQueryUI": true,
                                                "bAutoWidth":true,
                                                "iDisplayLength": 50,
                                                "scrollX": 100,
                                                "sDom": \'<"top"lf>rt<"bottom"ip><"clear">\'});
        
        //doubleclick adds item to cart
        jQuery(\'#results_table tr\').dblclick(function(event) {
            event.preventDefault();
            var position = resultsTable.fnGetPosition(this); // getting the clicked row position
            var titleID = resultsTable.fnGetData(position)[0];
            jQuery.get(\'/admin/search_id\', {titleid:titleID}, function(data) {
                console.log(data);
                autofill_dict=data[0];
                console.log(autofill_dict);
                autofill_dict[\'printlabel\']=true;
                params=jQuery.param(autofill_dict);
                console.log(params);
                doc_url= \'/admin/add_to_inventory?\' + params;
                console.log(doc_url);
                document.location.href= doc_url;         
            });
            return false;
        });
        
\t});
</script>
"""
        )

        ########################################
        ## END - generated method body

        return _dummyTrans and trans.response().getvalue() or ""

    def body(self, **KWS):

        ## CHEETAH: generated from #def body at line 75, col 1.
        trans = KWS.get("trans")
        if (
            not trans
            and not self._CHEETAH__isBuffering
            and not callable(self.transaction)
        ):
            trans = self.transaction  # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter

        ########################################
        ## START - generated method body

        write(
            """<h1>Inventory</h1>
<div class="showhide"><a  href="javascript:show_hide(\'search_form\')">Show/hide search form</a></div>
<br />
<form id="search_form" method="get" action="/admin/select_item_for_isbn_search"
"""
        )
        if not (VFFSL(SL, "empty", True)):  # generated from line 80, col 1
            write(
                """style="visibility:hidden;display:none"
"""
            )
        write(
            '''>

<label class="textbox" for="title">Title</label> 
<input class="textbox" type="text" id="title" name="title" value="'''
        )
        _v = VFFSL(SL, "title", True)  # '$title' on line 86, col 67
        if _v is not None:
            write(_filter(_v, rawExpr="$title"))  # from line 86, col 67.
        write(
            '''" /><br />

<label class="textbox" for="author">Author</label> 
<input class="textbox" type="text" name="author" id="author" value="'''
        )
        _v = VFFSL(SL, "author", True)  # '$author' on line 89, col 69
        if _v is not None:
            write(_filter(_v, rawExpr="$author"))  # from line 89, col 69.
        write(
            '''" /><br />

<label class="textbox" for="category">Keyword</label> 
<input class="textbox" type="text" name="category" id="category" value="'''
        )
        _v = VFFSL(SL, "category", True)  # '$category' on line 92, col 73
        if _v is not None:
            write(_filter(_v, rawExpr="$category"))  # from line 92, col 73.
        write(
            """" /><br />

<div class=\'show_hide_div\'>
<span class="show_hide_disc_triangle ui-state-default ui-corner-all" data-subscript="0"><span class="ui-icon ui-icon-triangle-1-e"></span><span class="text" style="display: block; ">More options...</span></span>
</div>
<div class="slidingDiv">

<label class="textbox" for="location">Location</label> 
<select class="textbox" id="location" name="location">
"""
        )
        i = 0
        for loc in VFFSL(SL, "locations", True):  # generated from line 102, col 1
            write("""<option id=""")
            _v = VFFSL(SL, "i", True)  # '$i' on line 103, col 12
            if _v is not None:
                write(_filter(_v, rawExpr="$i"))  # from line 103, col 12.
            write(""" value='""")
            _v = VFFSL(SL, "loc.id", True)  # '$loc.id' on line 103, col 22
            if _v is not None:
                write(_filter(_v, rawExpr="$loc.id"))  # from line 103, col 22.
            write(
                """' 
"""
            )
            if "%s" % (VFFSL(SL, "loc.id", True)) == VFFSL(
                SL, "location", True
            ):  # generated from line 104, col 1
                write(
                    """selected="true" 
"""
                )
            write(""">""")
            _v = VFFSL(
                SL, "loc.locationName", True
            )  # '$loc.locationName' on line 107, col 2
            if _v is not None:
                write(_filter(_v, rawExpr="$loc.locationName"))  # from line 107, col 2.
            write(
                """</option>
"""
            )
            i = VFFSL(SL, "i", True) + 1
        write(
            '''</select><br />

<label class="textbox" for="publisher">Publisher</label> 
<input class="textbox" type="text" name="publisher" id="publisher" value="'''
        )
        _v = VFFSL(SL, "publisher", True)  # '$publisher' on line 113, col 75
        if _v is not None:
            write(_filter(_v, rawExpr="$publisher"))  # from line 113, col 75.
        write(
            '''" /><br />

<label class="textbox" for="distributor">Distributor</label> 
<input class="textbox" type="text" name="distributor" id="distributor" value="'''
        )
        _v = VFFSL(SL, "distributor", True)  # '$distributor' on line 116, col 79
        if _v is not None:
            write(_filter(_v, rawExpr="$distributor"))  # from line 116, col 79.
        write(
            '''" /><br />

<label class="textbox" for="owner">Owner</label> 
<input class="textbox" type="text" name="owner" id="owner" value="'''
        )
        _v = VFFSL(SL, "owner", True)  # '$owner' on line 119, col 67
        if _v is not None:
            write(_filter(_v, rawExpr="$owner"))  # from line 119, col 67.
        write(
            '''" /><br />

<label class="textbox" for="tag">Tag</label> 
<input class="textbox" type="text" id="tag" name="tag" value="'''
        )
        _v = VFFSL(SL, "tag", True)  # '$tag' on line 122, col 63
        if _v is not None:
            write(_filter(_v, rawExpr="$tag"))  # from line 122, col 63.
        write(
            """" /><br />
</div>

<label class="textbox" for="kind">Kind</label> 
<select class="textbox" id="kind" name="kind">
"""
        )
        for k in VFFSL(SL, "kinds", True):  # generated from line 127, col 1
            write("""<option value='""")
            _v = VFFSL(SL, "k.id", True)  # '$k.id' on line 128, col 16
            if _v is not None:
                write(_filter(_v, rawExpr="$k.id"))  # from line 128, col 16.
            write(
                """' 
"""
            )
            if "%s" % (VFFSL(SL, "k.id", True)) == VFFSL(
                SL, "kind", True
            ):  # generated from line 129, col 1
                write(
                    """selected="true" 
"""
                )
            write(""">""")
            _v = VFFSL(SL, "k.kindName", True)  # '$k.kindName' on line 132, col 2
            if _v is not None:
                write(_filter(_v, rawExpr="$k.kindName"))  # from line 132, col 2.
            write(
                """</option>
"""
            )
        write(
            """</select><br />

<input class="submit" type="submit">

<br />
</form>
<table class="sortable" id="results_table" >
<colgroup class="title_id">
<thead>
  <tr>
    <th>ID</th>
"""
        )
        if VFFSL(SL, "should_show_images", True):  # generated from line 145, col 5
            write(
                """    <th>Image</th>
"""
            )
        write(
            """    <th>Title</th>
    <th>Author</th>
    <th>ISBN</th>
    <th>Format</th>
    <th>Copies in Stock</th>
    <th>Distributor</th>
    <th>Publisher</th>
    <th>Last Sold</th>
"""
        )
        # <th>Keyword</th>
        write(
            """  </tr>
</thead>
<tbody>
"""
        )
        for t in VFFSL(SL, "titles", True):  # generated from line 160, col 1
            write(
                """  <tr>
    <td>"""
            )
            if VFFSL(SL, "t.id", True):  # generated from line 162, col 9
                _v = VFFSL(SL, "t.id", True)
                if _v is not None:
                    write(_filter(_v))
            else:
                _v = ""
                if _v is not None:
                    write(_filter(_v))
            write(
                """</td>
"""
            )
            if VFFSL(SL, "should_show_images", True):  # generated from line 163, col 5
                write(
                    """    <td>
"""
                )
                if VFFSL(SL, "t.images", True):  # generated from line 165, col 9
                    write("""        <img src='""")
                    _v = VFN(VFFSL(SL, "t.images", True), "retrieve_image_url", False)(
                        "small"
                    )  # '$t.images.retrieve_image_url("small")' on line 166, col 19
                    if _v is not None:
                        write(
                            _filter(_v, rawExpr='$t.images.retrieve_image_url("small")')
                        )  # from line 166, col 19.
                    write(
                        """'>
"""
                    )
                write(
                    """    </td>
"""
                )
            write("""    <td>""")
            if VFN(VFFSL(SL, "t", True), "safe", False)(
                "booktitle"
            ):  # generated from line 170, col 9
                _v = VFN(VFFSL(SL, "t", True), "safe", False)("booktitle")
                if _v is not None:
                    write(_filter(_v))
            else:
                _v = ""
                if _v is not None:
                    write(_filter(_v))
            write(
                """</td>
    <td>"""
            )
            if VFFSL(SL, "t.authors_as_string", True):  # generated from line 171, col 9
                _v = VFFSL(SL, "t.authors_as_string", True)
                if _v is not None:
                    write(_filter(_v))
            else:
                _v = ""
                if _v is not None:
                    write(_filter(_v))
            write(
                """</td>
    <td>"""
            )
            if VFFSL(SL, "t.isbn", True):  # generated from line 172, col 9
                _v = VFFSL(SL, "t.isbn", True)
                if _v is not None:
                    write(_filter(_v))
            else:
                _v = ""
                if _v is not None:
                    write(_filter(_v))
            write(
                """</td>
    <td>"""
            )
            if VFFSL(SL, "t.type", True):  # generated from line 173, col 9
                _v = VFFSL(SL, "t.type", True)
                if _v is not None:
                    write(_filter(_v))
            else:
                _v = ""
                if _v is not None:
                    write(_filter(_v))
            write(
                """</td>
    <td>"""
            )
            if VFN(VFFSL(SL, "t", True), "copies_in_status", False)(
                "STOCK"
            ):  # generated from line 174, col 9
                _v = VFN(VFFSL(SL, "t", True), "copies_in_status", False)("STOCK")
                if _v is not None:
                    write(_filter(_v))
            else:
                _v = ""
                if _v is not None:
                    write(_filter(_v))
            write(
                """</td>
    <td>"""
            )
            if VFN(
                VFFSL(SL, "t", True), "distributors_as_string", False
            )():  # generated from line 175, col 9
                _v = VFN(VFFSL(SL, "t", True), "distributors_as_string", False)()
                if _v is not None:
                    write(_filter(_v))
            else:
                _v = ""
                if _v is not None:
                    write(_filter(_v))
            write(
                """</td>
    <td>"""
            )
            if VFN(VFFSL(SL, "t", True), "safe", False)(
                "publisher"
            ):  # generated from line 176, col 9
                _v = VFN(VFFSL(SL, "t", True), "safe", False)("publisher")
                if _v is not None:
                    write(_filter(_v))
            else:
                _v = ""
                if _v is not None:
                    write(_filter(_v))
            write(
                """</td>
    <td>"""
            )
            if VFFSL(SL, "t.last_book_sold", True):  # generated from line 177, col 9
                _v = VFFSL(SL, "t.last_book_sold.sold_when", True)
                if _v is not None:
                    write(_filter(_v))
            else:
                _v = ""
                if _v is not None:
                    write(_filter(_v))
            write(
                """</td>
"""
            )
            # <td>#if $t.categories_as_string then $t.categories_as_string else ""#</td>
            write(
                """</tr>
"""
            )
        write(
            """</tbody>
</table>

"""
        )

        ########################################
        ## END - generated method body

        return _dummyTrans and trans.response().getvalue() or ""

    def writeBody(self, **KWS):

        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (
            not trans
            and not self._CHEETAH__isBuffering
            and not callable(self.transaction)
        ):
            trans = self.transaction  # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter

        ########################################
        ## START - generated method body

        # Choose item from inventory using usual search criteria
        # and add it to cart
        write(
            """





"""
        )

        ########################################
        ## END - generated method body

        return _dummyTrans and trans.response().getvalue() or ""

    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES

    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_ChooseItemForISBNTemplate = "writeBody"


## END CLASS DEFINITION

if not hasattr(ChooseItemForISBNTemplate, "_initCheetahAttributes"):
    templateAPIClass = getattr(
        ChooseItemForISBNTemplate, "_CHEETAH_templateClass", Template
    )
    templateAPIClass._addCheetahPlumbingCodeToClass(ChooseItemForISBNTemplate)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://cheetahtemplate.org/

##################################################
## if run from command line:
if __name__ == "__main__":
    from Cheetah.TemplateCmdLineIface import CmdLineIface

    CmdLineIface(templateObj=ChooseItemForISBNTemplate()).run()
