#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Cheetah.compat import unicode
from inventoryserver.Skeleton import Skeleton

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '3.0.0'
__CHEETAH_versionTuple__ = (3, 0, 0, 'final', 1)
__CHEETAH_genTime__ = 1510105566.0335777
__CHEETAH_genTimestamp__ = 'Wed Nov  8 01:46:06 2017'
__CHEETAH_src__ = 'ReportTemplate.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Nov  8 00:51:24 2017'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class ReportTemplate(Skeleton):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(ReportTemplate, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def headscripts(self, **KWS):



        ## CHEETAH: generated from #def headscripts at line 8, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''<script type="text/javascript">
    jQuery(document).ready( function(){
        jQuery(\'form:first input:first\').focus();    
        var resultsTable = jQuery(\'#report_results_table\').dataTable({
            "aaSorting":[],
            "bJQueryUI": true,
            "bAutoWidth":true,
            \'sPaginationType\':\'simple_numbers\',
            \'columnDefs\': [
                {},
            ],
            "iDisplayLength": 50,
            "order":[],
            "sDom": \'<"top"lf>rt<"bottom"ip><"clear">\'});
       resultsTable.width(\'100%\');
    });
</script>
''')
        _v = VFN(VFFSL(SL,"report",True),"headscripts",False)() # '${report.headscripts()}' on line 26, col 1
        if _v is not None: write(_filter(_v, rawExpr='${report.headscripts()}')) # from line 26, col 1.
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def pagetitle(self, **KWS):



        ## CHEETAH: generated from #def pagetitle at line 29, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''Report: ''')
        _v = VFN(VFFSL(SL,"report",True),"metadata",True)['name'] # "${report.metadata['name']}" on line 30, col 9
        if _v is not None: write(_filter(_v, rawExpr="${report.metadata['name']}")) # from line 30, col 9.
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def body(self, **KWS):



        ## CHEETAH: generated from #def body at line 33, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''<h1>''')
        _v = VFN(VFFSL(SL,"report",True),"metadata",True)['name'] # "${report.metadata['name']}" on line 34, col 5
        if _v is not None: write(_filter(_v, rawExpr="${report.metadata['name']}")) # from line 34, col 5.
        write('''</h1>
''')
        _v = VFN(VFFSL(SL,"report",True),"queryForm",False)() # '${report.queryForm()}' on line 35, col 1
        if _v is not None: write(_filter(_v, rawExpr='${report.queryForm()}')) # from line 35, col 1.
        write('''
''')
        if VFFSL(SL,"do_query",True): # generated from line 36, col 1
            write('''<table class="sortable" id="report_results_table" >
<thead>
''')
            _v = VFFSL(SL,"header",True) # '$header' on line 39, col 1
            if _v is not None: write(_filter(_v, rawExpr='$header')) # from line 39, col 1.
            write('''
</thead>
<tbody>
''')
            for r in VFFSL(SL,"results",True): # generated from line 42, col 1
                _v = VFFSL(SL,"r",True) # '$r' on line 43, col 1
                if _v is not None: write(_filter(_v, rawExpr='$r')) # from line 43, col 1.
                write('''
''')
            write('''</tbody>
''')
            if VFFSL(SL,"report.do_total",True): # generated from line 46, col 1
                write('''<tfoot><td><b>Total: ''')
                _v = VFFSL(SL,"total",True) # '$total' on line 47, col 22
                if _v is not None: write(_filter(_v, rawExpr='$total')) # from line 47, col 22.
                write('''</b></td></tfoot>
''')
            write('''</table>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # Report Template for actuall laying out report form
        # and its results. The specifics of a report are laid
        # out by subclassing reports.report Report.
        write('''



''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_ReportTemplate= 'writeBody'

## END CLASS DEFINITION

if not hasattr(ReportTemplate, '_initCheetahAttributes'):
    templateAPIClass = getattr(ReportTemplate, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(ReportTemplate)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://cheetahtemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=ReportTemplate()).run()


