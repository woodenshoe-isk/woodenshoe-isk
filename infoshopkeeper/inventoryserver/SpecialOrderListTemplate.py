#!/usr/bin/env python


##################################################
## DEPENDENCIES
import sys
import os
import os.path

try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import (
    NotFound,
    valueForName,
    valueFromSearchList,
    valueFromFrameOrSearchList,
)
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Cheetah.compat import unicode
from inventoryserver.Skeleton import Skeleton

##################################################
## MODULE CONSTANTS
VFFSL = valueFromFrameOrSearchList
VFSL = valueFromSearchList
VFN = valueForName
currentTime = time.time
__CHEETAH_version__ = "3.0.0"
__CHEETAH_versionTuple__ = (3, 0, 0, "final", 1)
__CHEETAH_genTime__ = 1510105566.157672
__CHEETAH_genTimestamp__ = "Wed Nov  8 01:46:06 2017"
__CHEETAH_src__ = "SpecialOrderListTemplate.tmpl"
__CHEETAH_srcLastModified__ = "Wed Nov  8 00:51:24 2017"
__CHEETAH_docstring__ = "Autogenerated by Cheetah: The Python-Powered Template Engine"

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
        "This template was compiled with Cheetah version"
        " %s. Templates compiled before version %s must be recompiled."
        % (__CHEETAH_version__, RequiredCheetahVersion)
    )

##################################################
## CLASSES


class SpecialOrderListTemplate(Skeleton):

    ##################################################
    ## CHEETAH GENERATED METHODS

    def __init__(self, *args, **KWs):

        super(SpecialOrderListTemplate, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = "searchList namespaces filter filtersLib errorCatcher".split()
            for k, v in KWs.items():
                if k in allowedKWs:
                    cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)

    def pagetitle(self, **KWS):

        ## CHEETAH: generated from #def pagetitle at line 7, col 1.
        trans = KWS.get("trans")
        if (
            not trans
            and not self._CHEETAH__isBuffering
            and not callable(self.transaction)
        ):
            trans = self.transaction  # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter

        ########################################
        ## START - generated method body

        write(
            """Special Orders
"""
        )

        ########################################
        ## END - generated method body

        return _dummyTrans and trans.response().getvalue() or ""

    def headscripts(self, **KWS):

        ## CHEETAH: generated from #def headscripts at line 11, col 1.
        trans = KWS.get("trans")
        if (
            not trans
            and not self._CHEETAH__isBuffering
            and not callable(self.transaction)
        ):
            trans = self.transaction  # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter

        ########################################
        ## START - generated method body

        write(
            """<script src="/javascript/jquery.fixedheadertable.js"></script>
<script type="text/javascript">                                         
    //Make lesser used fields hideable
    jQuery(document).ready( function(){
        
        jQuery(\'#begin_date,#end_date\').datepicker({dateFormat:\'yy-mm-dd\'}).blur();

        //hide special order id column 
        jQuery(\'#results_table td:nth-child(5), #results_table th:nth-child(5)\').hide();
        
        //dataTable gives us pagination, etc for free
        jQuery(\'#results_table\').dataTable({    \'aSorting\':[[1, \'asc\']],
                                                \'order\':[[1, \'asc\']],
                                                \'sPaginationType\':\'simple_numbers\',
                                                "iDisplayLength": 50,
                                                \'sDom\': \'<"H"lfr><"#new_special_order">t<"F"ip>\'
                                            });

        
        //add button to make new special order
        jQuery(\'#new_special_order\').button().click( function( event ) {
            event.preventDefault();
            document.location.href= \'/specialorder/special_order_edit\';
        });
            
        //doubleclick adds item to cart, except for iOS/Android
        //where we use a single click
        if (navigator.userAgent.match(/ipad|iphone|ios|android/i) == null) {
            jQuery(\'#results_table tr\').dblclick(function(event) {
                event.preventDefault();
                specialorderID=jQuery(this).children().last()[0].innerHTML;
                document.location.href= \'/specialorder/special_order_edit?id=\' + specialorderID;
                return false;
            });
        } else {
            jQuery(\'#results_table tr\').click(function(event) {
                event.preventDefault();
                specialorderID=jQuery(this).children().last()[0].innerHTML;
                document.location.href= \'/specialorder/special_order_edit?id=\' + specialorderID;
                return false;
            });
        }
    });
</script>
"""
        )

        ########################################
        ## END - generated method body

        return _dummyTrans and trans.response().getvalue() or ""

    def body(self, **KWS):

        ## CHEETAH: generated from #def body at line 58, col 1.
        trans = KWS.get("trans")
        if (
            not trans
            and not self._CHEETAH__isBuffering
            and not callable(self.transaction)
        ):
            trans = self.transaction  # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter

        ########################################
        ## START - generated method body

        write(
            """<button id=\'new_special_order\' class=\'new_special_order\'><h2>New Special Order</h2></button></br>

<h1>Search Special Orders</h1>

<form id="search_form" method="get" action="/specialorder/special_order_list"
"""
        )
        if not (VFFSL(SL, "empty", True)):  # generated from line 64, col 1
            write(
                """style="visibility:hidden;display:none"
"""
            )
        write(
            '''>
<label class="textbox" for="author">Customer Name</label> 
<input class="textbox" type="text" name="customer_name" id="customer_name" value="'''
        )
        _v = VFFSL(SL, "customer_name", True)  # '$customer_name' on line 69, col 83
        if _v is not None:
            write(_filter(_v, rawExpr="$customer_name"))  # from line 69, col 83.
        write(
            '''" /><br />

<label class="textbox" for="author">Customer Phone Number</label> 
<input class="textbox" type="text" name="customer_phone_number" id="customer_phone_number" value="'''
        )
        _v = VFFSL(
            SL, "customer_phone_number", True
        )  # '$customer_phone_number' on line 72, col 99
        if _v is not None:
            write(
                _filter(_v, rawExpr="$customer_phone_number")
            )  # from line 72, col 99.
        write(
            '''" /><br />

<label class="textbox" for="author">Customer E-Mail</label> 
<input class="textbox" type="text" name="customer_email" id="customer_email" value="'''
        )
        _v = VFFSL(SL, "customer_email", True)  # '$customer_email' on line 75, col 85
        if _v is not None:
            write(_filter(_v, rawExpr="$customer_email"))  # from line 75, col 85.
        write(
            '''" /><br />

<label class="textbox" for="title">Title</label> 
<input class="textbox" type="text" id="title" name="title" value="'''
        )
        _v = VFFSL(SL, "title", True)  # '$title' on line 78, col 67
        if _v is not None:
            write(_filter(_v, rawExpr="$title"))  # from line 78, col 67.
        write(
            '''" /><br />

<label class="textbox" for="author">Author</label> 
<input class="textbox" type="text" name="author" id="author" value="'''
        )
        _v = VFFSL(SL, "author", True)  # '$author' on line 81, col 69
        if _v is not None:
            write(_filter(_v, rawExpr="$author"))  # from line 81, col 69.
        write(
            """" /><br />

<label class="textbox" for="kind">Kind</label> 
<select class="textbox" id="kind" name="kind">
"""
        )
        for k in VFFSL(SL, "kinds", True):  # generated from line 85, col 1
            write("""<option value='""")
            _v = VFFSL(SL, "k.id", True)  # '$k.id' on line 86, col 16
            if _v is not None:
                write(_filter(_v, rawExpr="$k.id"))  # from line 86, col 16.
            write(
                """' 
"""
            )
            if "%s" % (VFFSL(SL, "k.id", True)) == VFFSL(
                SL, "kind", True
            ):  # generated from line 87, col 1
                write(
                    """selected="true" 
"""
                )
            write(""">""")
            _v = VFFSL(SL, "k.kindName", True)  # '$k.kindName' on line 90, col 2
            if _v is not None:
                write(_filter(_v, rawExpr="$k.kindName"))  # from line 90, col 2.
            write(
                """</option>
"""
            )
        write(
            """</select><br />

<input class="submit" type="submit">

<br />
</form>

<table class="sortable" id="results_table" >
<colgroup class="title_id">
<thead>
  <tr>
    <th>Customer Name</th>
    <th>Customer Phone Number</th>
    <th>Customer E-Mail</th>
    <th>Items Ordered</th>
"""
        )
        # <th>ISBN</th>
        # <th>Book Title</th>
        # <th>Author</th>
        write(
            """    <th>ID</th>
  </tr>
</thead>
<tbody>
"""
        )
        for s in VFFSL(SL, "orders", True):  # generated from line 114, col 1
            write(
                """    <tr>
        <td>"""
            )
            if VFFSL(SL, "s.customerName", True):  # generated from line 116, col 13
                _v = VFFSL(SL, "s.customerName", True)
                if _v is not None:
                    write(_filter(_v))
            else:
                _v = ""
                if _v is not None:
                    write(_filter(_v))
            write(
                """</td>
        <td>"""
            )
            if VFFSL(
                SL, "s.customerPhoneNumber", True
            ):  # generated from line 117, col 13
                _v = VFFSL(SL, "s.customerPhoneNumber", True)
                if _v is not None:
                    write(_filter(_v))
            else:
                _v = ""
                if _v is not None:
                    write(_filter(_v))
            write(
                """</td>
        <td>"""
            )
            if VFFSL(SL, "s.customerEmail", True):  # generated from line 118, col 13
                _v = VFFSL(SL, "s.customerEmail", True)
                if _v is not None:
                    write(_filter(_v))
            else:
                _v = ""
                if _v is not None:
                    write(_filter(_v))
            write(
                """</td>
        <td>
            <ul class=special_order_list>
"""
            )
            for t in VFFSL(SL, "s.titles", True):  # generated from line 121, col 17
                write(
                    """                    <li>
                        <ul>
                            <li>"""
                )
                if VFFSL(SL, "t.isbn", True):  # generated from line 124, col 33
                    _v = VFFSL(SL, "t.isbn", True)
                    if _v is not None:
                        write(_filter(_v))
                else:
                    _v = ""
                    if _v is not None:
                        write(_filter(_v))
                write(
                    """</li>
                            <li>"""
                )
                if VFFSL(SL, "t.booktitle", True):  # generated from line 125, col 33
                    _v = VFFSL(SL, "t.booktitle", True)
                    if _v is not None:
                        write(_filter(_v))
                else:
                    _v = ""
                    if _v is not None:
                        write(_filter(_v))
                write(
                    """</li>
                            <li>"""
                )
                if VFFSL(
                    SL, "t.authors_as_string", True
                ):  # generated from line 126, col 33
                    _v = VFFSL(SL, "t.authors_as_string", True)
                    if _v is not None:
                        write(_filter(_v))
                else:
                    _v = ""
                    if _v is not None:
                        write(_filter(_v))
                write(
                    """</li>
                        </ul>
                    </li>
"""
                )
            write(
                """            </ul>
        </td>
        <td>"""
            )
            if VFFSL(SL, "s.id", True):  # generated from line 132, col 13
                _v = VFFSL(SL, "s.id", True)
                if _v is not None:
                    write(_filter(_v))
            else:
                _v = ""
                if _v is not None:
                    write(_filter(_v))
            write(
                """</td>
    </tr>
"""
            )
        write(
            """</tbody>
</table>

"""
        )

        ########################################
        ## END - generated method body

        return _dummyTrans and trans.response().getvalue() or ""

    def writeBody(self, **KWS):

        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (
            not trans
            and not self._CHEETAH__isBuffering
            and not callable(self.transaction)
        ):
            trans = self.transaction  # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter

        ########################################
        ## START - generated method body

        # Choose item from inventory using usual search criteria
        # and add it to cart
        write(
            """



"""
        )

        ########################################
        ## END - generated method body

        return _dummyTrans and trans.response().getvalue() or ""

    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES

    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_SpecialOrderListTemplate = "writeBody"


## END CLASS DEFINITION

if not hasattr(SpecialOrderListTemplate, "_initCheetahAttributes"):
    templateAPIClass = getattr(
        SpecialOrderListTemplate, "_CHEETAH_templateClass", Template
    )
    templateAPIClass._addCheetahPlumbingCodeToClass(SpecialOrderListTemplate)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://cheetahtemplate.org/

##################################################
## if run from command line:
if __name__ == "__main__":
    from Cheetah.TemplateCmdLineIface import CmdLineIface

    CmdLineIface(templateObj=SpecialOrderListTemplate()).run()
